print.letter(expression(paste("d) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 2, expression(sigma), outer = T, line = 2)
dev.off()
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = 16,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"] + wt.parameters[rockfish.wt,"mat.slope"]+wt.parameters[rockfish.wt,"mat.size"])
lm
summary(lm0)
summary(lm)
pval = anova(lm)
pval
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]+wt.parameters[rockfish.wt,"mat.size"])
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]+wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]*wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = glm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]*wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = glm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
summary(glm())
summary(glm
)
glm()
summary(lm)
all = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+
wt.parameters[,"mat.slope"]+
wt.parameters[,"steep"]+
wt.parameters[,"k"])
summary(all)
plot(all)
all.rock = glm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"])
plot(m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.m.int.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.int.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~log(wt.parameters[rockfish.wt,"lratio"]))
plot(lratio.rock)
lratio.rock = lm(log(weighted.sigma[xx,rockfish.wt])~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
summary(lratio.rock)
wt.pch.vec = c(rep(16,3), 17, 15, rep(16,3), 18, rep(17,2), 18, 17, rep(16, 4))
# Uncertainty vs. Maturity, Length, Ratio w/ Linear model Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
###############################################################################################
# Uncertainty vs. M  and Lratio by LH Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm_LH_4.png", w = 6, h = 6)
par(mfrow = c(2,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[rockfish.wt,"m"],weighted.sigma[xx,rockfish.wt] * convert, type = 'p', col = blue, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("a) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Rockfish")
plot( wt.parameters[roundfish.wt,"m"], weighted.sigma[xx,roundfish.wt] * convert, type = 'p', col = green, pch = 17,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("b) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Roundfish")
plot(wt.parameters[rockfish.wt,"lratio"], weighted.sigma[xx,rockfish.wt] * convert,  type = 'p', col = blue, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("c) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
plot(wt.parameters[roundfish.wt,"lratio"], weighted.sigma[xx,roundfish.wt] * convert,  type = 'p', col = green, pch = 17,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("d) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 2, expression(sigma), outer = T, line = 2)
dev.off()
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(1,1), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
wt.col.vec = c(rep(blue,3), green, 'darkgrey', rep(blue,3), red, rep(green,2), red, green, rep(blue, 4))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 2,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
library(sss)
a = 1
plot()
plot(0,0)
library("sss", lib.loc="C:/Program Files/R/R-3.4.3/library")
detach("package:sss", unload=TRUE)
wd = "C:/_Research/Steepness_Weighting/models"
stocks = c("aurora", "black_ca", "black_or", "black_wa", "blackgill", "blue_deacon_ca",
"blue_deacon_or", "bocaccio", "canary", "chilipepper", "china_c", "china_n",
"china_s", "darkblotched", "greenspotted_n", "greenspotted_s", "greenstriped",
"pop", "rougheye", "splitnose", "widow", "yelloweye", "yellowtail_n")
a
a=1
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),')\n',sep='')
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
for (a in 1:length(stocks))
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
}
for (a in 1:length(stocks)){
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
}
for (a in 1:length(stocks)){
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n', sep='')
cat('\newpage')
}
cat('\n\newpage\n')
cat('\n, '\newpage',\n')
cat('\n\newpage\n')
cat('\n\\newpage\n')
devtools::install_github("nwfsc-assess/VASTWestCoast")
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales')
for(p in requiredPackages){
library(p,character.only = TRUE)
}
# Change options
options(xtable.comment = FALSE)  # turns off xtable comments
options(scipen=999)              # turns off scientific notation
# Load workspace image of the BASE MODEL(S) from SS_output in r4ss
load("./r4ss/SS_output.RData")
# =============================================================================
# VARIABLES TO EDIT
# =============================================================================
# Species, common and scientific
spp.up = 'Petrale sole'
spp = 'petrale sole'
spp.sci = 'Eopsetta jordani'
# Define the survey names
nwfsc = 'NWFSC West Coast Groundfish Bottom Trawl Survey'
full.tri = 'AFSC/NWFSC West Coast Triennial Shelf Survey'
tri = "Triennial Survey"
# minimum vulnerable age class
min_age = '3+'
# number of independent assessment models to include in the document
n_models = 1
# model names; if you only have one model the label will just be "model"
mod1_label = "base model"
# Management targets
SPR.target  = 0.30
MT   = 0.25
MSST = 0.125
# Set if males are estimated as an offset to females
parm.offset = FALSE
# -----------------------------------------------------------------------------
# Fecundity relationship
# whether spawning output is billions of eggs (fecundity relationship on) or
# mt (no fecundity relationship)
fecund = mod1$SpawnOutputUnits
# Fecundity text depending on the input value above (can change this line if you like)
if(fecund == 'numbers'){fecund_unit='billion eggs'} else {fecund_unit = 'mt'}
if(fecund == 'numbers'){fecund_unit='million eggs'} else {fecund_unit = 'mt'}
# Change these years either here or in the table code if you need to
# First and last years of model model 1
Dat_start_mod1 = mod1$startyr
Dat_end_mod1   = mod1$endyr
# First and last years for the the "recent"  10 years data tables
FirstYR = Dat_end_mod1 - 8       # first year of recent
LastYR  = Dat_end_mod1 + 1       # last year
# Projection years - years where Era is "forecast"
Project_firstyr = min(mod1$timeseries$Yr[mod1$timeseries$Era=='FORE'])
Project_lastyr  = max(mod1$timeseries$Yr[mod1$timeseries$Era=='FORE'])
round(5.4/29, 3)
cat('\n![', AgeComp_mod1[3,caption_col], ' \\label{fig:fishery_age_pearson}](r4ss/plots_mod1/', AgeComp_mod1[3, path_col], ')\n', sep='')
for(imod in 1:n_models) {
if (imod==1) {
mod_num = 'mod1'
} else {
if (imod==2) {
mod_num = 'mod2'
} else {
mod_num = 'mod3'
}}
# Read in the plotInfoTable.csv containining the list of plots created from r4SS
plotInfoTable = read.csv(paste0('./r4ss/plots_',mod_num,'/plotInfoTable_',mod_num,'_final.csv'))
# Replace the @ in A@L with AAL and the - in S-R with S_R
# And get rid of other funny characters
plotInfoTable$category = gsub('@', 'A', plotInfoTable$category)
plotInfoTable$category = gsub('-', '_', plotInfoTable$category)
plotInfoTable$caption  = gsub('@', 'A', plotInfoTable$caption)
plotInfoTable$caption  = gsub('-', '_', plotInfoTable$caption)
plotInfoTable$caption  = gsub('<br>|<blockquote>|</i>|<i>|</blockquote>',
' ',plotInfoTable$caption)
# Change factors to strings
plotInfoTable = data.frame(lapply(plotInfoTable, as.character), stringsAsFactors=FALSE)
# Pull out the different categories of plots, e.g., Bio, Sel, Timeseries, etc
categories = as.vector(unique(plotInfoTable$category))
# Create a dataframe for each category - because you're running these from a
# .R file, you can view all of these dataframes in the Environment
for(icat in 1:length(categories)){
dummy_df = data.frame()
dummy_df = subset(plotInfoTable,category==categories[icat])
dummy_df = data.frame(lapply(dummy_df, as.character), stringsAsFactors=FALSE)
#dummy_df$label = substr(dummy_df$basename,1, nchar(dummy_df$basename)-4)
dummy_df$label = substr(dummy_df$file,1, nchar(dummy_df$file)-4)
dummy_df$filepath = paste0('./r4ss/plots_',mod_num,'/',dummy_df$basename)
assign(paste0(categories[icat],'_',mod_num),dummy_df)
}
} # end n_models
# multiple models
multi_page_fig = c('page2', 'page3', 'page4', 'page5', 'page6', 'page7')
# Give plotInfoTable columns to use to paste in info for the
# caption, label and file path
caption_col = 2
label_col = 10
path_col =  1
LenComp_mod1
LenComp_mod1[2,caption_col]
LenComp_mod1[2, path_col]
LenComp_mod1[2, ]
head(LenComp_mod1)
LenComp_mod1[2,caption_col]
LenComp_mod1[1,caption_col]
LenComp_mod1[1:10,caption_col]
LenComp_mod1[10:20,caption_col]
LenComp_mod1[11:30,caption_col]
LenComp_mod1[,caption_col]
