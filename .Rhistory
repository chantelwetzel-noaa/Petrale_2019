#  Recruit_units <- "millions"
#  Recruityrs$Value <- Recruityrs$Value/1000
#  Recruityrs$lowerCI <- Recruityrs$lowerCI/1000
#  Recruityrs$upperCI <- Recruityrs$upperCI/1000
#}
Recruityrs$CI = paste0(print.numeric(Recruityrs$lowerCI, digits = sb.dig), ' - ', print.numeric(Recruityrs$upperCI, digits = sb.dig))
Recruityrs$Value = round(Recruityrs$Value, digits = sb.dig)
Recruittab=subset(Recruityrs, select = c('YEAR', 'Value', 'CI'))
colnames(Recruittab) = c('Year',paste0('Estimated Recruitment'), '~ 95% Confidence Interval')
assign(paste('Recruittab_',mod_area,sep=''), Recruittab)
# Recruitment deviations
RecDevs = mod1$recruitpars[mod1$recruitpars$Yr >= FirstYR & mod1$recruitpars$Yr <= LastYR, c("Value", "Parm_StDev")]
RecDevs$lowerCI = RecDevs$Value - qnorm(1-(1-0.95)/2)*RecDevs$Parm_StDev
RecDevs$upperCI = RecDevs$Value + qnorm(1-(1-0.95)/2)*RecDevs$Parm_StDev
RecDevs$CI = paste0(print.numeric(RecDevs$lowerCI, digits = 3), ' - ', print.numeric(RecDevs$upperCI, digits = 3))
RecDevs$Value = round(RecDevs$Value, digits = 3)
RecDevtab=subset(RecDevs, select = c('Value', 'CI'))
colnames(RecDevtab) = c(paste0('Estimated Recruitment Devs.'), '~ 95% Confidence Interval')
# Paste the data frames together
Recruit_All = cbind(Recruittab_mod1, RecDevtab)
# Model 1 table
Recruit_mod1.table = xtable(Recruit_All,
caption = c(paste('Recent estimated trend in recruitment and estimated recruitment deviations determined from the base model. The recruitment deviations for 2018 and 2019 were fixed at zero within the model.', sep='')),
label = 'tab:Recruit_mod1',
digits = c(0, 0, 0, 0, 3, 2))
align(Recruit_mod1.table) = c('l',
'>{\\centering}p{.8in}',
'>{\\centering}p{1.0in}',
'>{\\centering}p{1.4in}',
'>{\\centering}p{1.0in}',
'>{\\centering}p{1.4in}')
#=============================================================================
# Executive Table D: Exploitation Rates
#=============================================================================
# Extract exploitation values
mod = mod1
mod_area = 'mod1'
# Extract exploitation and SPR ratio values from r4SS output
Exploit = mod$derived_quants[grep('F',mod$derived_quants$Label),]
Exploit = Exploit[c(-1,-2),]
SPRratio = mod$derived_quants[grep('SPRratio',mod$derived_quants$Label),]
SPRratio = SPRratio[c(-1,-2),]
# Exploitation and calculate lower and upper 95% CI
Exploityrs = Exploit[Exploit$Label >= paste('F_', FirstYR-1, sep='') &
Exploit$Label <= paste('F_', LastYR-1, sep=''), ]
Exploityrs$YEAR = seq(FirstYR-1, LastYR-1)
Exploityrs$lowerCI = Exploityrs$Value + qnorm(0.025) * Exploityrs$StdDev
Exploityrs$upperCI = Exploityrs$Value - qnorm(0.025) * Exploityrs$StdDev
Exploityrs$CI = paste0(print.numeric(Exploityrs$lowerCI, digits = dep.dig), ' - ', print.numeric(Exploityrs$upperCI, digits = dep.dig))
Exploittab = subset(Exploityrs, select=c('Value', 'CI'))
colnames(Exploittab) = c('Exploitation Rate', '~ 95% Confidence Interval')
# Spawning potential ratio and calculate lower and upper 95% CI
SPRratioyrs = SPRratio[SPRratio$Label >= paste('SPRratio_', FirstYR-1, sep='')
& SPRratio$Label <= paste('SPRratio_', LastYR-1, sep=''), ]
SPRratioyrs$Year = seq(FirstYR-1, LastYR-1)
SPRratioyrs$lowerCI = SPRratioyrs$Value + qnorm(0.025) * SPRratioyrs$StdDev
SPRratioyrs$upperCI = SPRratioyrs$Value - qnorm(0.025) * SPRratioyrs$StdDev
SPRratioyrs$CI = paste0(print.numeric(SPRratioyrs$lowerCI, digits = dep.dig), ' - ', print.numeric(SPRratioyrs$upperCI, digits = dep.dig))
SPRratiotab = subset(SPRratioyrs, select = c('Year', 'Value', 'CI'))
SPRratiotab$Year = as.factor(SPRratiotab$Year)
colnames(SPRratiotab) = c('Year', '1-SPR', '~ 95% Confidence Interval')
assign(paste('SPRratio_Exploit_', mod_area, sep=''), cbind(SPRratiotab, Exploittab))
# =============================================================================
# Create the three tables for SPR Ratio and Exploitation
SPRratio_Exploit_mod1.table = xtable(SPRratio_Exploit_mod1,
caption=c(paste('Recent trend in spawning potential ratio 1-SPR and summary exploitation rate for age 3+ biomass for ', spp, '.' , sep='')),
label='tab:SPR_Exploit_mod1', digits = 3)
align(SPRratio_Exploit_mod1.table) = c('l','l',
'>{\\centering}p{0.9in}',
'>{\\centering}p{1.2in}',
'>{\\centering}p{1.2in}',
'>{\\centering}p{1.2in}')
#=============================================================================
# Executive Table E: Reference Points
#=============================================================================
# Extract reference points table data
mod = mod1
mod_area = 'mod1'
# Rbind all of the data for the big summary reference table
x = 1:3
Ref_pts = rbind (
SSB_Unfished    = mod$derived_quants[grep('SSB_un',                  mod$derived_quants$Label)[1], x],
SmryBio_Unfished = mod$derived_quants[grep('SmryBio_un',               mod$derived_quants$Label), x],
Recr_Unfished   = mod$derived_quants[grep('Recr_un',                 mod$derived_quants$Label), x],
SPB_lastyr      = mod$derived_quants[grep(paste0('SSB_', LastYR),    mod$derived_quants$Label), x],
Depletion_lastyr= mod$derived_quants[grep(paste0('Bratio_', LastYR), mod$derived_quants$Label), x],
Refpt_sB        = c(NA, NA, NA),
SSB_Btgt        = mod$derived_quants[grep('SSB_Btgt',      mod$derived_quants$Label), x],
SPR_Btgt        = mod$derived_quants[grep('SPR_Btgt',      mod$derived_quants$Label), x],
Fstd_Btgt       = mod$derived_quants[grep('Fstd_Btgt',     mod$derived_quants$Label), x],
TotYield_Btgt   = mod$derived_quants[grep('Dead_Catch_Btgt', mod$derived_quants$Label), x],
Refpt_SPR       = c(NA, NA, NA),
SSB_SPRtgt      = mod$derived_quants[grep('SSB_SPR', mod$derived_quants$Label), x],
SPR_proxy       = c('SPR_proxy', SPR.target, NA),
Fstd_SPRtgt     = mod$derived_quants[grep('Fstd_SPR',     mod$derived_quants$Label), x],
TotYield_SPRtgt = mod$derived_quants[grep('Dead_Catch_SPR', mod$derived_quants$Label), x],
Refpts_MSY      = c(NA, NA, NA),
SSB_MSY         = mod$derived_quants[grep('SSB_MSY', mod$derived_quants$Label), x],
SPR_MSY         = mod$derived_quants[grep('SPR_MSY', mod$derived_quants$Label), x],
Fstd_MSY        = mod$derived_quants[grep('Fstd_MSY', mod$derived_quants$Label), x],
TotYield_MSY    = mod$derived_quants[grep('Dead_Catch_MSY', mod$derived_quants$Label), x] )
Ref_pts$Value   = as.numeric(Ref_pts$Value)
Ref_pts$StdDev  = as.numeric(Ref_pts$StdDev)
Ref_pts$Value1  = ifelse(Ref_pts$Value >= 1, as.character(round(Ref_pts$Value, dig1)),
as.character(round(Ref_pts$Value, dig3)))
Ref_pts$lowerCI  = Ref_pts$Value + qnorm(0.025) * Ref_pts$StdDev
Ref_pts$upperCI  = Ref_pts$Value - qnorm(0.025) * Ref_pts$StdDev
Which = which(Ref_pts$Label=="Recr_Unfished")
logint  <- sqrt(log(1+(Ref_pts[Which,"StdDev"]/Ref_pts[Which, "Value"])^2))
Ref_pts[Which, "lowerCI"] <- exp(log(Ref_pts[Which, "Value"]) + qnorm(0.025)*logint)
Ref_pts[Which, "upperCI"] <- exp(log(Ref_pts[Which, "Value"]) + qnorm(0.975)*logint)
Ref_pts$lowerCI1 = ifelse(Ref_pts$lowerCI >= 1, as.character(round(Ref_pts$lowerCI, dig1)),
as.character(round(Ref_pts$lowerCI, dig3)))
Ref_pts$upperCI1 = ifelse(Ref_pts$upperCI>=1, as.character(round(Ref_pts$upperCI,dig1)),
as.character(round(Ref_pts$upperCI, dig3)))
Quantity = c(paste('Unfished spawning biomass (', fecund_unit, ')', sep = ''),
paste('Unfished age ', min_age, ' biomass (mt)', sep = ''),
'Unfished recruitment (R0, thousands)',
paste('Spawning biomass', '(', LastYR, ' ', fecund_unit, ')', sep = ''),
paste('Relative spawning biomass (depletion) (', LastYR,')',sep=''),
'\\textbf{$\\text{Reference points based on } \\mathbf{SB_{25\\%}}$}',
'Proxy spawning biomass ($B_{25\\%}$)',
'SPR resulting in $B_{25\\%}$ ($SPR_{B25\\%}$)',
'Exploitation rate resulting in $B_{25\\%}$',
'Yield with $SPR_{B25\\%}$ at $B_{25\\%}$ (mt)',
'\\textbf{\\textit{Reference points based on SPR proxy for MSY}}',
'Spawning biomass',
'$SPR_{30\\%}$',
'Exploitation rate corresponding to $SPR_{30\\%}$',
'Yield with $SPR_{30\\%}$ at $SB_{SPR}$ (mt)',
'\\textbf{\\textit{Reference points based on estimated MSY values}}',
'Spawning biomass at $MSY$ ($SB_{MSY}$)',
'$SPR_{MSY}$',
'Exploitation rate at $MSY$',
'$MSY$ (mt) ')
Ref_pts = cbind(Quantity, Ref_pts$Value1, Ref_pts$lowerCI1, Ref_pts$upperCI1)
Ref_pts[c(6, 11, 13, 16), 2:4] = ''
colnames(Ref_pts) = c('\\textbf{Quantity}', '\\textbf{Estimate}',
'\\textbf{$\\sim$2.5\\%  Confidence Interval}',
'\\textbf{$\\sim$97.5\\%  Confidence Interval}')
assign(paste('Ref_pts_', mod_area, sep = ''), Ref_pts)
# Model 1
Ref_pts_mod1.table = xtable(Ref_pts_mod1,
caption=c('Summary of reference
points and management quantities for the
base case.'),
label='tab:Ref_pts_mod1', digits = dig3)
# Add alignment
align(Ref_pts_mod1.table) = c('l',
'>{\\raggedright}p{4.1in}',
'>{\\centering}p{.65in}',
'>{\\centering}p{.65in}',
'>{\\centering}p{.65in}')
mngmnt = read.csv('./txt_files/ESF_Exec_mngmt_performance.csv')
find.yr = as.numeric(substring(mngmnt$Year, 7, 10))
temp.manage = cbind(mngmnt, find.yr)
mngmnt = temp.manage[temp.manage$find.yr < LastYR, -dim(temp.manage)[2]]
# Add the total landings and totality mortality
totdead = print(aggregate(kill_bio ~ Yr, FUN = sum, mod1$catch[mod1$catch$Yr>=2009,])$kill_bio,digits = 0)
landings  = print(aggregate(Obs ~ Yr, FUN = sum, mod1$catch[mod1$catch$Yr>=2009,])$Obs, digits = 0)
mngmnt = cbind(mngmnt, landings, totdead)
colnames(mngmnt) = c('Year',
'OFL (mt; ABC prior to 2011)',
'ACL (mt; OY prior to 2011)',
'Total Landings (mt)',
'Estimated Total Catch (mt)')
# Create the management performance table
mngmnt.table = xtable(mngmnt,
caption=c('Recent trend in total catch and
landings (mt) relative to the management guidelines.
Estimated total catch reflect the landings
plus the model estimated discarded biomass based on discard rate data.'),
label='tab:mnmgt_perform')
mngmnt.table
# Extract OFLs for next 10 years for each model
#Fore_Table = read.csv('./txt_files/OFL_forecast.csv')
OFL_mod1 = mod1$derived_quants[grep('OFL',mod1$derived_quants$Label),]
OFL_mod1 = OFL_mod1[, 2]
ACL_mod1 = mod1$derived_quants[grep('ForeCatch_',mod1$derived_quants$Label),]
ACL_mod1 = ACL_mod1[,2]
OFL = as.data.frame(cbind(OFL_mod1, ACL_mod1))
OFL$Year=seq(Project_firstyr,Project_lastyr, 1)
OFL$Year = as.factor(OFL$Year)
OFL = OFL[,c(3, 1, 2)]
OFL[,2] =  print.numeric(OFL$OFL_mod1, digits = 0)
OFL[,3] =  print.numeric(OFL$ACL_mod1, digits = 0)
# Extract biomass/output
SpawningB = mod$derived_quants[grep('SSB', mod$derived_quants$Label), ]
SpawningB = SpawningB[c(-1, -2), ]
Spawn.fore = SpawningB[SpawningB$Label >= paste('SSB_', Project_firstyr, sep='')
& SpawningB$Label <= paste('SSB_', Project_lastyr,  sep=''), "Value"]
Spawn.fore = print(Spawn.fore, digits = 0)
Bratio = mod$derived_quants[grep('Bratio', mod$derived_quants$Label), ]
Bratio = Bratio[c(-1, -2), ]
Bratio.fore = Bratio[Bratio$Label >= paste('Bratio_', Project_firstyr, sep='')
& Bratio$Label <= paste('Bratio_', Project_lastyr,  sep=''), "Value"]
Bratio.fore = print(Bratio.fore, digits = 3)
Fore_Table = cbind(OFL, Spawn.fore, Bratio.fore)
colnames(Fore_Table) = c('Year','OFL', "ABC", paste0('Spawning Biomass (',fecund_unit,')'), "Relative Biomass")
write.csv(Fore_Table, file = './txt_files/OFL_forecast.csv', row.names = FALSE)
Fore_Table
find = grep("comp_lendat_bubflt1mkt1", LenComp_mod1$basename)
find
find = grep("comp_lendat_bubflt1", LenComp_mod1$basename)
fin
find
find = grep("comp_lendat_bubflt1", CompDat_mod1$basename)
find
find = grep("comp_lendat_bubflt1mkt2", CompDat_mod1$basename)
find
CompDat_mod1[4,]
<center>
n = unique(mod1$discard$Fleet)[1:4]
round(mod1$parameters[mod1$parameters$Label == "NatM_p_1_Fem_GP_1", 3],3)
round(mod1$parameters[mod1$parameters$Label == "NatM_p_1_Mal_GP_1", 3],3)
round(mod1$parameters[mod1$parameters$Label == "VonBert_K_Fem_GP_1", 3],3)
round(mod1$parameters[mod1$parameters$Label == "VonBert_K_Mal_GP_1", 3],3)
round(exp(mod1$parameters[mod1$parameters$Label == "LnQ_base_WinterN(1)", 3]), 3)
round(mod1$parameters[mod1$parameters$Label == "Q_power_WinterS(3)", 3], 3)
round(exp(mod1$parameters[mod1$parameters$Label == "LnQ_base_WinterS(3)", 3]), 3)
OFL_mod1 = mod1$derived_quants[grep('OFL',mod1$derived_quants$Label),]
OFL_mod1
OFL_mod1 = OFL_mod1[, 2]
OFL_mod1
OFL_mod1[1:2]
rm(list=ls(all=TRUE))
model.num = ""
# What model file to use
model.file = "model"
# Cannot change the name below without changing it throughout the Assessment_template file
model.plots = "plots_mod1" #paste0("plot_",model.file)
covar = TRUE
# Give the names of the data and control files, for each model
# Used in the SS_files_linebreaks.R
mod1_dat = "2019_petrale.dat"
# Control file names
mod1_ctrl = "2019_petrale.ctl"
#=====================================================================================
# SECTION1: Run r4ss, parse plotInfoTable.csv file, & add linebreaks to SS files
#=====================================================================================
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales', 'rmarkdown', 'knitr', 'devtools')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
# Install the latest version of r4ss using devtools
# devtools::install_github("r4ss/r4ss", ref = "development")
library(r4ss)
# CHANGE values in this section ===============================================
# number of assessment models - this is run before the R_preamble.R, which also
# contains this value
n_models = 1
# By default, you can only work in the directory containing the project
# Set the directory here if you're getting errors
if (Sys.info()["user"] == "Chantel.Wetzel") {
#setwd('C:/Users/chantell.Wetzel/Documents/GitHub/Petrale_2019')
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
}
# =============================================================================
# set input and output directories
input.dir = file.path(getwd(), 'SS')
output.dir = file.path(getwd(), 'r4ss')
dir.create(file.path(output.dir,model.plots), showWarnings = FALSE)
# BEGIN r4ss===================================================================
# REMOVE OLD r4SS OUTPUT!!!!! -------------------------------------------------
do.call("file.remove", list(list.files(file.path(output.dir, model.plots),
full.names=TRUE))) #, pattern = "!Thumb")))
# Run r4ss for each model - **CHANGE DIRECTORY if necessary**
mod1 = SS_output(dir = file.path(input.dir,model.file), forecast=T, printstats = FALSE)
# Save the workspace an image
save.image('./r4ss/SS_output.RData')
#=====================================================================================
# SECTION 2: RUN r4ss plots for each model & save files
#=====================================================================================
out.dir.mod1 = file.path(output.dir,model.plots)
fleets.in = c("Winter (N)", "Summer (N)", "Winter (S)", "Summer (S)",
"Triennial - Early",
"Triennial - Late",
#"AFSC/NFSC West Coast Triennial Shelf Survey - Early",
#"AFSC/NWFSC West Coast Triennial Shelf Survey - Late",
"NWFSC West Coast Groundfish Bottom Trawl Survey")
# Model 1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets.in,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
# Source the figures that are created based on the model results
source('./Rcode/Figures.R')
# Run the code to parse the plotInfoTable files
source('./Rcode/Parse_r4ss_plotInfoTable.R')
base      <- readLines( paste0(getwd(),"/SS/", model.file, "/Report.sso"))
# First and last years of model model 1
startyr = mod1$startyr # year model 1 data starts
endyr   = mod1$endyr   # year model 1 data ends
maxAge = length(strsplit(base[grep(paste("1 1 1 1 1 1 1", startyr,sep=" "),base)]," ")[[1]]) - 14
temp = mapply(function(x) temp = as.numeric(strsplit(base[grep(paste("1 1 1 1 1 1 1", x,sep=" "),base)]," ")[[1]][14:(14+maxAge)]), x = startyr:endyr)
natage.f = t(temp)
temp = mapply(function(x) temp = as.numeric(strsplit(base[grep(paste("1 1 2 1 1 1 2", x,sep=" "),base)]," ")[[1]][14:(14+maxAge)]), x = startyr:endyr)
natage.m = t(temp)
colnames(natage.f) = 0:maxAge; colnames(natage.m) = 0:maxAge
rownames(natage.f) <- startyr:endyr ; rownames(natage.m) <- startyr:endyr
write.csv(natage.f, paste0(getwd(), "/txt_files/Petrale_natage_f.csv"))
write.csv(natage.m, paste0(getwd(), "/txt_files/Petrale_natage_m.csv"))
#=====================================================================================
# SECTION 6: Functions
#=====================================================================================
print.numeric<-function(x, digits) { formatC(x, digits = digits, format = "f") }
comma <- function(x, digits=0) { formatC(x, big.mark=",", digits, format = "f") }
0.438*1.15
exp(0.438*1.15)
5.4/30
(5.4/28)*1.65
Exec_catch_summary_sep = Final_Catch_AllYrs[, 1:ncol(Final_Catch_AllYrs)]
Final_Catch_AllYrs = read.csv('./txt_files/Petrale_2019_PacFIN_catch_forExpansion.csv')
head(Final_Catch_AllYrs)
tail(Final_Catch_AllYrs)
Exec_catch_sep = Final_Catch_AllYrs
#Exec_catch_sep = Exec_catch_sep [,2:ncol(Exec_catch_sep)]
Exec_catch_sep = Exec_catch_sep[Exec_catch_sep$Year != LastYR, ]
colnames(Exec_catch_sep) = c('Year',  'Winter (N)', 'Summer (N)', 'Winter (S)', 'Summer (S)')
#Plot only years where catch is great than 1 mt total
ind = apply(Exec_catch_sep[,2:ncol(Exec_catch_sep )], 1, sum)
ind = ind > 1
Exec_catch_sep  = Exec_catch_sep[ind,]
tail(Exec_catch_sep)
Final_Catch_AllYrs = read.csv('./txt_files/Petrale_2019_PacFIN_catch_forExpansion.csv')
tail(
Final_Catch_AllYrs)
Final_Catch_AllYrs$Years
tail(
Final_Catch_AllYrs)
Exec_catch_sep = c(Final_Catch_AllYrs$Years,
Final_Catch_AllYrs$WA.TRAWL.1+Final_Catch_AllYrs$OR.TRAWL.1,
Final_Catch_AllYrs$WA.TRAWL.2+Final_Catch_AllYrs$OR.TRAWL.2,
Final_Catch_AllYrs$CA.TRAWL.1+Final_Catch_AllYrs$CA.TRAWL.1,
Final_Catch_AllYrs$CA.TRAWL.2+Final_Catch_AllYrs$CA.TRAWL.2)
tail(Exec_catch_sep)
names(mod1)
mod1$Pstar_sigma
Exec_catch_sep = cbind(Final_Catch_AllYrs$Years,
Final_Catch_AllYrs$WA.TRAWL.1+Final_Catch_AllYrs$OR.TRAWL.1,
Final_Catch_AllYrs$WA.TRAWL.2+Final_Catch_AllYrs$OR.TRAWL.2,
Final_Catch_AllYrs$CA.TRAWL.1+Final_Catch_AllYrs$CA.TRAWL.1,
Final_Catch_AllYrs$CA.TRAWL.2+Final_Catch_AllYrs$CA.TRAWL.2)
tail(Exec_catch_sep)
Exec_catch_sep = Exec_catch_sep[Exec_catch_sep$Year != LastYR, ]
Exec_catch_sep = data.frame(Year = Final_Catch_AllYrs$Years,
Winter_N = Final_Catch_AllYrs$WA.TRAWL.1+Final_Catch_AllYrs$OR.TRAWL.1,
Summer_N = Final_Catch_AllYrs$WA.TRAWL.2+Final_Catch_AllYrs$OR.TRAWL.2,
Winter_S = Final_Catch_AllYrs$CA.TRAWL.1+Final_Catch_AllYrs$CA.TRAWL.1,
Summer_S = Final_Catch_AllYrs$CA.TRAWL.2+Final_Catch_AllYrs$CA.TRAWL.2)
Exec_catch_sep = Exec_catch_sep[Exec_catch_sep$Year != LastYR, ]
LastYr = 2010
LastYr = 2019
Exec_catch_sep = Exec_catch_sep[Exec_catch_sep$Year != LastYR, ]
LastYr = 2019
LastYR = 2019
Exec_catch_sep = Exec_catch_sep[Exec_catch_sep$Year != LastYR, ]
colnames(Exec_catch_sep) = c('Year',  'Winter (N)', 'Summer (N)', 'Winter (S)', 'Summer (S)')
ind = apply(Exec_catch_sep[,2:ncol(Exec_catch_sep )], 1, sum)
ind = ind > 1
Exec_catch_sep  = Exec_catch_sep[ind,]
Final_Catch_AllYrs = read.csv('./txt_files/Petrale_2019_PacFIN_catch_forExpansion.csv')
Exec_catch_sep = data.frame(Year = Final_Catch_AllYrs$Years,
Winter_N = Final_Catch_AllYrs$WA.TRAWL.1+Final_Catch_AllYrs$OR.TRAWL.1,
Summer_N = Final_Catch_AllYrs$WA.TRAWL.2+Final_Catch_AllYrs$OR.TRAWL.2,
Winter_S = Final_Catch_AllYrs$CA.TRAWL.1+Final_Catch_AllYrs$CA.TRAWL.1,
Summer_S = Final_Catch_AllYrs$CA.TRAWL.2+Final_Catch_AllYrs$CA.TRAWL.2)
Exec_catch_sep = Exec_catch_sep[Exec_catch_sep$Year != LastYR, ]
colnames(Exec_catch_sep) = c('Year',  'Winter (N)', 'Summer (N)', 'Winter (S)', 'Summer (S)')
#Plot only years where catch is great than 1 mt total
ind = apply(Exec_catch_sep[,2:ncol(Exec_catch_sep )], 1, sum)
ind = ind > 1
Exec_catch_sep  = Exec_catch_sep[ind,]
# Split catch by regions -retaning the colunns for each -you'll have to edit
Exec_region1_catch = Exec_catch_sep
# Melt data so it can be plotted
Exec_region1_catch = melt(Exec_region1_catch, id='Year')
Exec_region1_catch
colnames(Exec_region1_catch) = c('Year','Fishery','Removals')
Plot_catch = function(Catch_df) {
ggplot(Catch_df, aes(x=Year, y=Removals,fill = Fishery)) +
geom_area(position='stack') +
scale_fill_manual(values= rich.colors.short(dim(Exec_catch_sep)[2]-1)) +
scale_x_continuous(breaks=seq(Dat_start_mod1, Dat_end_mod1, 20)) +
ylab('Landings (mt)')
}
Final_Catch_AllYrs = read.csv('./txt_files/Petrale_2019_PacFIN_catch_forExpansion.csv')
Exec_catch_summary_sep = Final_Catch_AllYrs[, 1:ncol(Final_Catch_AllYrs)]
Exec_catch_sep = data.frame(Year = Exec_catch_summary_seps$Years,
Winter_N = Exec_catch_summary_sep$WA.TRAWL.1+Exec_catch_summary_sep$OR.TRAWL.1,
Summer_N = Exec_catch_summary_sep$WA.TRAWL.2+Exec_catch_summary_sep$OR.TRAWL.2,
Winter_S = Exec_catch_summary_sep$CA.TRAWL.1+Exec_catch_summary_sep$CA.TRAWL.1,
Exec_catch_summary = cbind(Exec_catch_summary_sep[,1:5],
apply(Exec_catch_summary_sep[,2:ncol(Exec_catch_summary_sep)], 1, sum))
Exec_catch_summary_sep = Final_Catch_AllYrs[, 1:ncol(Final_Catch_AllYrs)]
Exec_catch_sep = data.frame(Year = Exec_catch_summary_seps$Years,
Winter_N = Exec_catch_summary_sep$WA.TRAWL.1+Exec_catch_summary_sep$OR.TRAWL.1,
Summer_N = Exec_catch_summary_sep$WA.TRAWL.2+Exec_catch_summary_sep$OR.TRAWL.2,
Winter_S = Exec_catch_summary_sep$CA.TRAWL.1+Exec_catch_summary_sep$CA.TRAWL.1,
Summer_S = Exec_catch_summary_sep$CA.TRAWL.2+Exec_catch_summary_sep$CA.TRAWL.2)
Exec_catch_summary_sep = Final_Catch_AllYrs[, 1:ncol(Final_Catch_AllYrs)]
Exec_catch_sep = data.frame(Year = Exec_catch_summary_seps$Years,
Winter_N = Exec_catch_summary_sep$WA.TRAWL.1+Exec_catch_summary_sep$OR.TRAWL.1,
Summer_N = Exec_catch_summary_sep$WA.TRAWL.2+Exec_catch_summary_sep$OR.TRAWL.2,
Winter_S = Exec_catch_summary_sep$CA.TRAWL.1+Exec_catch_summary_sep$CA.TRAWL.1,
Summer_S = Exec_catch_summary_sep$CA.TRAWL.2+Exec_catch_summary_sep$CA.TRAWL.2)
Exec_catch_sep = data.frame(Year = Exec_catch_summary_sep$Years,
Winter_N = Exec_catch_summary_sep$WA.TRAWL.1+Exec_catch_summary_sep$OR.TRAWL.1,
Summer_N = Exec_catch_summary_sep$WA.TRAWL.2+Exec_catch_summary_sep$OR.TRAWL.2,
Winter_S = Exec_catch_summary_sep$CA.TRAWL.1+Exec_catch_summary_sep$CA.TRAWL.1,
Summer_S = Exec_catch_summary_sep$CA.TRAWL.2+Exec_catch_summary_sep$CA.TRAWL.2)
cbind(Exec_catch_summary_sep[,1:5],
apply(Exec_catch_summary_sep[,2:ncol(Exec_catch_summary_sep)], 1, sum))
Exec_catch_sep
Exec_catch_summary_sep[,1:5]
Exec_catch_summary_sep = Final_Catch_AllYrs[, 1:ncol(Final_Catch_AllYrs)]
Exec_catch_summary_sep = data.frame(Year = Exec_catch_summary_sep$Years,
Winter_N = Exec_catch_summary_sep$WA.TRAWL.1+Exec_catch_summary_sep$OR.TRAWL.1,
Summer_N = Exec_catch_summary_sep$WA.TRAWL.2+Exec_catch_summary_sep$OR.TRAWL.2,
Winter_S = Exec_catch_summary_sep$CA.TRAWL.1+Exec_catch_summary_sep$CA.TRAWL.1,
Summer_S = Exec_catch_summary_sep$CA.TRAWL.2+Exec_catch_summary_sep$CA.TRAWL.2)
# Bind the data frames together
Exec_catch_summary = cbind(Exec_catch_summary_sep[,1:5],
apply(Exec_catch_summary_sep[,2:ncol(Exec_catch_summary_sep)], 1, sum))
Exec_catch_summary
Final_Catch_AllYrs[, 1:ncol(Final_Catch_AllYrs)]
head( Final_Catch_AllYrs)
?prettyNum
prettyNum(format(Ref_pts_mod1[7,2],0),big.mark=",")
base_summary = cbind(OFL, ACL, landings, totdead, mod1_summary)
n = unique(mod1$discard$Fleet)[1:4]
n
i = 3
ind = mod1$discard$Fleet == n[i]
mod1$discard$Yr[ind]
mod1$discard$Fleet_Name[ind]
discard = NULL
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
discard
tm = ifelse{discard[,1] %in% c("1985", "1986", "1987"), "Pikitch", "WCGOP"}
tm = ifelse(discard[,1] %in% c("1985", "1986", "1987"), "Pikitch", "WCGOP")
tm
tmp = ifelse(discard[,1] %in% c("1985", "1986", "1987"), "Pikitch", "WCGOP")
discard = cbind(discard, tmp)
colnames(discard) = c('Year',
'Fleet',
'Discard Rate',
'Standard Error',
'Data Source')
discard
base.yr  = mod1$timeseries[,"Yr"]
yr = base.yr[base.yr <= 2019]
base.ssb = mod1$timeseries[1:length(yr),"SpawnBio"]
colors = c("black", "red", "blue", "darkgreen", "orange", "purple")
plot(yr, base.ssb, type = 'l', lwd = 2, col = colors[1], ylim=c(0, 45000), ylab = "Spawning output", xlab = "Year")
lines(dat$Year, dat$X2015, lty = 2, col = colors[2], lwd =2)
ssb = dat$X2013
lines(dat$Year[1:length(ssb)], ssb, lty = 2, col = colors[3], lwd =2)
ssb = dat$X2011
lines(dat$Year[1:length(ssb)], ssb, lty = 2, col = colors[4], lwd =2)
ssb = dat$X2009
lines(dat$Year[1:length(ssb)], ssb, lty = 2, col = colors[5], lwd =2)
ssb = dat$X2005 ; ind = !is.na(ssb)
lines(dat$Year[ind], ssb[ind], lty = 2, col = colors[6], lwd =2)
legend("topright", bty = 'n', legend = c(2019, 2015, 2013, 2011, 2009, 2005), col = colors,
lty = c(1,2,2,2,2,2,2,2), lwd = 2)
pngfun <- function(wd, file,w=7,h=7,pt=12){
file <- file.path(wd, file)
cat('writing PNG to',file,'\n')
png(filename=file,
width=w,height=h,
units='in',res=300,pointsize=pt)
}
#################################################################################################################
# Assessment History
#################################################################################################################
dat = read.csv("C:/Assessments/2019/petrale_2019/Data/Assessment_History/Spawning_biomass.csv")
base.yr  = mod1$timeseries[,"Yr"]
yr = base.yr[base.yr <= 2019]
base.ssb = mod1$timeseries[1:length(yr),"SpawnBio"]
colors = c("black", "red", "blue", "darkgreen", "orange", "purple")
#pngfun(wd = 'C:/Assessments/2019/petrale_2019/Data/Assessment_History', file = 'Assessment_History.png', h = 6)
pngfun(wd =  paste0(getwd(), "/Figures"), file = 'Assessment_History.png', h = 6)
#2019
plot(yr, base.ssb, type = 'l', lwd = 2, col = colors[1], ylim=c(0, 45000), ylab = "Spawning output", xlab = "Year")
lines(dat$Year, dat$X2015, lty = 2, col = colors[2], lwd =2)
ssb = dat$X2013
lines(dat$Year[1:length(ssb)], ssb, lty = 2, col = colors[3], lwd =2)
ssb = dat$X2011
lines(dat$Year[1:length(ssb)], ssb, lty = 2, col = colors[4], lwd =2)
ssb = dat$X2009
lines(dat$Year[1:length(ssb)], ssb, lty = 2, col = colors[5], lwd =2)
ssb = dat$X2005 ; ind = !is.na(ssb)
lines(dat$Year[ind], ssb[ind], lty = 2, col = colors[6], lwd =2)
legend("topright", bty = 'n', legend = c(2019, 2015, 2013, 2011, 2009, 2005), col = colors,
lty = c(1,2,2,2,2,2,2,2), lwd = 2)
dev.off()
