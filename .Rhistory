summary(lm)
lm = glm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
summary(glm())
summary(glm
)
glm()
summary(lm)
all = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+
wt.parameters[,"mat.slope"]+
wt.parameters[,"steep"]+
wt.parameters[,"k"])
summary(all)
plot(all)
all.rock = glm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"])
plot(m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.m.int.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.int.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~log(wt.parameters[rockfish.wt,"lratio"]))
plot(lratio.rock)
lratio.rock = lm(log(weighted.sigma[xx,rockfish.wt])~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
summary(lratio.rock)
wt.pch.vec = c(rep(16,3), 17, 15, rep(16,3), 18, rep(17,2), 18, 17, rep(16, 4))
# Uncertainty vs. Maturity, Length, Ratio w/ Linear model Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
###############################################################################################
# Uncertainty vs. M  and Lratio by LH Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm_LH_4.png", w = 6, h = 6)
par(mfrow = c(2,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[rockfish.wt,"m"],weighted.sigma[xx,rockfish.wt] * convert, type = 'p', col = blue, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("a) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Rockfish")
plot( wt.parameters[roundfish.wt,"m"], weighted.sigma[xx,roundfish.wt] * convert, type = 'p', col = green, pch = 17,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("b) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Roundfish")
plot(wt.parameters[rockfish.wt,"lratio"], weighted.sigma[xx,rockfish.wt] * convert,  type = 'p', col = blue, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("c) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
plot(wt.parameters[roundfish.wt,"lratio"], weighted.sigma[xx,roundfish.wt] * convert,  type = 'p', col = green, pch = 17,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("d) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 2, expression(sigma), outer = T, line = 2)
dev.off()
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(1,1), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
wt.col.vec = c(rep(blue,3), green, 'darkgrey', rep(blue,3), red, rep(green,2), red, green, rep(blue, 4))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 2,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
library(sss)
a = 1
plot()
plot(0,0)
library("sss", lib.loc="C:/Program Files/R/R-3.4.3/library")
detach("package:sss", unload=TRUE)
wd = "C:/_Research/Steepness_Weighting/models"
stocks = c("aurora", "black_ca", "black_or", "black_wa", "blackgill", "blue_deacon_ca",
"blue_deacon_or", "bocaccio", "canary", "chilipepper", "china_c", "china_n",
"china_s", "darkblotched", "greenspotted_n", "greenspotted_s", "greenstriped",
"pop", "rougheye", "splitnose", "widow", "yelloweye", "yellowtail_n")
a
a=1
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),')\n',sep='')
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
for (a in 1:length(stocks))
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
}
for (a in 1:length(stocks)){
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
}
for (a in 1:length(stocks)){
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n', sep='')
cat('\newpage')
}
cat('\n\newpage\n')
cat('\n, '\newpage',\n')
cat('\n\newpage\n')
cat('\n\\newpage\n')
devtools::install_github("nwfsc-assess/VASTWestCoast")
rm(list=ls(all=TRUE))
model.num = ""
# What model file to use
model.file = "model"
# Cannot change the name below without changing it throughout the Assessment_template file
model.plots = "plots_mod1" #paste0("plot_",model.file)
covar = TRUE
# Give the names of the data and control files, for each model
# Used in the SS_files_linebreaks.R
mod1_dat = "2019_petrale.dat"
# Control file names
mod1_ctrl = "2019_petrale.ctl"
#=====================================================================================
# SECTION1: Run r4ss, parse plotInfoTable.csv file, & add linebreaks to SS files
#=====================================================================================
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales', 'rmarkdown', 'knitr', 'devtools')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
# Install the latest version of r4ss using devtools
# devtools::install_github("r4ss/r4ss")
library(r4ss)
n_models = 1
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
input.dir = file.path(getwd(), 'SS')
output.dir = file.path(getwd(), 'r4ss')
dir.create(file.path(output.dir,model.plots), showWarnings = FALSE)
mod1 = SS_output(dir = file.path(input.dir,model.file), forecast=T, printstats = FALSE)
# Save the workspace an image
save.image('./r4ss/SS_output.RData')
#=====================================================================================
# SECTION 2: RUN r4ss plots for each model & save files
#=====================================================================================
out.dir.mod1 = file.path(output.dir,model.plots)
fleets = c("Winter (N)", "Summer (N)", "Winter (S)", "Summer (S)",
"AFSC/NFSC West Coast Triennial Shelf Survey - Early",
"AFSC/NWFSC West Coast Triennial Shelf Survey - Late",
"NWFSC West Coast Groundfish Bottom Trawl Survey")
# Model 1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
file.path
file.path(plotdir, file())
file.path(plotdir, file
)
plotdir
out.dir.mod1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
mod1$cpue
devtools::install_github("r4ss/r4ss")
devtools::install_github("r4ss/r4ss", ref = "development")
32
library(r4ss)
mod1 = SS_output(dir = file.path(input.dir,model.file), forecast=T, printstats = FALSE)
out.dir.mod1 = file.path(output.dir,model.plots)
fleets = c("Winter (N)", "Summer (N)", "Winter (S)", "Summer (S)",
"AFSC/NFSC West Coast Triennial Shelf Survey - Early",
"AFSC/NWFSC West Coast Triennial Shelf Survey - Late",
"NWFSC West Coast Groundfish Bottom Trawl Survey")
# Model 1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
fleets = c("Winter (N)", "Summer (N)", "Winter (S)", "Summer (S)",
"Triennial - Early",
"Triennial - Late",
#"AFSC/NFSC West Coast Triennial Shelf Survey - Early",
#"AFSC/NWFSC West Coast Triennial Shelf Survey - Late",
"NWFSC West Coast Groundfish Bottom Trawl Survey")
# Model 1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
rm(list=ls(all=TRUE))
model.num = ""
# What model file to use
model.file = "model"
# Cannot change the name below without changing it throughout the Assessment_template file
model.plots = "plots_mod1" #paste0("plot_",model.file)
covar = TRUE
# Give the names of the data and control files, for each model
# Used in the SS_files_linebreaks.R
mod1_dat = "2019_petrale.dat"
# Control file names
mod1_ctrl = "2019_petrale.ctl"
#=====================================================================================
# SECTION1: Run r4ss, parse plotInfoTable.csv file, & add linebreaks to SS files
#=====================================================================================
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales', 'rmarkdown', 'knitr', 'devtools')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
# Install the latest version of r4ss using devtools
devtools::install_github("r4ss/r4ss", ref = "development")
# number of assessment models - this is run before the R_preamble.R, which also
# contains this value
n_models = 1
# By default, you can only work in the directory containing the project
# Set the directory here if you're getting errors
if (Sys.info()["user"] == "Chantel.Wetzel") {
#setwd('C:/Users/chantell.Wetzel/Documents/GitHub/Petrale_2019')
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
}
# =============================================================================
# set input and output directories
input.dir = file.path(getwd(), 'SS')
output.dir = file.path(getwd(), 'r4ss')
dir.create(file.path(output.dir,model.plots), showWarnings = FALSE)
# BEGIN r4ss===================================================================
# REMOVE OLD r4SS OUTPUT!!!!! -------------------------------------------------
do.call("file.remove", list(list.files(file.path(output.dir, model.plots),
full.names=TRUE))) #, pattern = "!Thumb")))
# Run r4ss for each model - **CHANGE DIRECTORY if necessary**
mod1 = SS_output(dir = file.path(input.dir,model.file), forecast=T, printstats = FALSE)
# Save the workspace an image
save.image('./r4ss/SS_output.RData')
#=====================================================================================
# SECTION 2: RUN r4ss plots for each model & save files
#=====================================================================================
out.dir.mod1 = file.path(output.dir,model.plots)
fleets = c("Winter (N)", "Summer (N)", "Winter (S)", "Summer (S)",
"Triennial - Early",
"Triennial - Late",
#"AFSC/NFSC West Coast Triennial Shelf Survey - Early",
#"AFSC/NWFSC West Coast Triennial Shelf Survey - Late",
"NWFSC West Coast Groundfish Bottom Trawl Survey")
# Model 1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
source('./Rcode/Figures.R')
source('./Rcode/Parse_r4ss_plotInfoTable.R')
