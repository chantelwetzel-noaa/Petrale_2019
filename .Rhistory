colnames(Fish_Length) = c('Year',
'Tows',
'Fish',
'Sample Size')
Fish_Length
Fish_Length.table = xtable(Fish_Length,
caption = c('Summary of NWFSC shelf-slope survey length samples used in the stock assessment.'),
label = 'tab:NWcombo_Lengths',
digits = 0)
# Add alignment
align(Fish_Length.table) = c('l',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{1in}')
Fish_Length = read.csv('./txt_files/nwfsc_combo_length_sample_size.csv')
dim(Fish_Length)
Fish_Length = Fish_Length[,2:dim(Fish_Length)]
Fish_Length = Fish_Length[,2:dim(Fish_Length)[2]]
colnames(Fish_Length) = c('Year',
'Tows',
'Fish',
'Sample Size')
Fish_Length.table = xtable(Fish_Length,
caption = c('Summary of NWFSC shelf-slope survey length samples used in the stock assessment.'),
label = 'tab:NWcombo_Lengths',
digits = 0)
align(Fish_Length.table) = c('l',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{1in}')
Fish_Length
Fish_Length = read.csv('./txt_files/nwfsc_combo_length_sample_size.csv')
Fish_Length
Fish_Length[,c("Year", "Tows", "All_Fish", "Sample_Size")]
Fish_Length = Fish_Length[,c("Year", "Tows", "All_Fish", "Sample_Size")]
colnames(Fish_Length) = c('Year',
'Tows',
'Fish',
'Sample Size')
Fish_Length.table = xtable(Fish_Length,
caption = c('Summary of NWFSC shelf-slope survey length samples used in the stock assessment.'),
label = 'tab:NWcombo_Lengths',
digits = 0)
align(Fish_Length.table) = c('l',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{1in}')
Fish_Length = read.csv('./txt_files/nwfsc_combo_age_sample_size.csv')
Fish_Length = Fish_Length[,-1]
Fish_Length
Fish_Length = read.csv('./txt_files/nwfsc_combo_age_sample_size.csv')
Fish_Length = Fish_Length[,c("Year", "Tows", "All_Fish", "Sample_Size")]
colnames(Fish_Length) = c('Year',
'Tows',
'Fish',
'Sample Size')
Fish_Length.table = xtable(Fish_Length,
caption = c('Summary of NWFSC shelf-slope survey age samples used in the stock assessment.'),
label = 'tab:NWcombo_Ages',
digits = 0)
align(Fish_Length.table) = c('l',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{1in}')
Fish_Length1 =  read.csv('./txt_files/triennial_early_length_sample_size.csv')
Fish_Length2 =  read.csv('./txt_files/triennial_late_length_sample_size.csv')
Fish_Length = rbind(Fish_Length1, Fish_Length2)
Fish_Length = Fish_Length[,c("Year", "Tows", "All_Fish", "Sample_Size")]
Fish_Length
Fish_Length1 =  read.csv('./txt_files/triennial_early_length_sample_size.csv')
Fish_Length2 =  read.csv('./txt_files/triennial_late_length_sample_size.csv')
Fish_Length = rbind(Fish_Length1, Fish_Length2)
Fish_Length
Fish_Length = Fish_Length[,c("Year", "Tows", "All_Fish", "Sample_Size")]
colnames(Fish_Length) = c('Year',
'Tows',
'Fish',
'Sample Size')
Fish_Length.table = xtable(Fish_Length,
caption = c('Summary of Triennial survey length samples used in the stock assessment.'),
label = 'tab:Triennial_Lengths',
digits = 0)
align(Fish_Length.table) = c('l',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{.75in}',
'>{\\centering}p{1in}')
n = unique(mod1$discard$Fleet)[1:2]
discard = NULL
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
print.numeric<-function(x, digits) { formatC(x, digits = digits, format = "f") }
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
tmp = c(rep("Pikitch", 3), rep("WGCOP", sum(discard[,2]=="WinterN")-3),
rep("Pikitch", 3), rep("WGCOP", sum(discard[,2]=="SummerN")-3))
sum(discard[,2]=="WinterN")-3
sum(discard[,2]=="WinterN")
discard
mod1$discard$Name
head(mod1$discard)
discard = NULL
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
discard
rep("WGCOP", sum(discard[,2]=="WinterN")-3)
tmp = c(rep("Pikitch", 3), rep("WGCOP", sum(discard[,2]=="WinterN")-3),
rep("Pikitch", 3), rep("WGCOP", sum(discard[,2]=="SummerN")-3))
tmp
discard = cbind(discard, tmp)
colnames(discard) = c('Year',
'Fleet',
'Discard Rate',
'Standard Error',
'Data Source')
value = ifelse(mod1$discard_spec$units[1] == 2, "discard rates", "total discard")
Discard.table = xtable(discard,
caption = paste('Summary of', value,'used in the model by each data source (continued on next page).'),
label = 'tab:Discard',
digits = 3)
Discard.table
align(Discard.table) = c('l',
'>{\\centering}p{.75in}',
'>{\\centering}p{1.1in}',
'>{\\centering}p{1.1in}',
'>{\\centering}p{1.1in}',
'>{\\centering}p{1.1in}')
n = unique(mod1$discard$Fleet)
discard = NULL
for (i in 3:length(n)){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
tmp = c(rep("WGCOP", dim(discard)[2]))
discard = cbind(discard, tmp)
colnames(discard) = c('Year',
'Fleet',
'Discard Rate',
'Standard Error',
'Data Source')
tmp = c(rep("WGCOP", dim(discard)[2]))
discard = cbind(discard, tmp)
discard
value
n = unique(mod1$discard$Fleet_Name)
discard = NULL
for (i in 3:length(n)){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
tmp = c(rep("WGCOP", dim(discard)[2]))
discard = cbind(discard, tmp)
colnames(discard) = c('Year',
'Fleet',
'Discard Rate',
'Standard Error',
'Data Source')
head(discard)
discard = NULL
for (i in 3:length(n)){
ind = mod1$discard$Fleet_Name == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
discard
tmp = c(rep("WGCOP", dim(discard)[2]))
discard = cbind(discard, tmp)
discard
tmp
dim(discard)
dim(discard)[2]
discard = NULL
for (i in 3:length(n)){
ind = mod1$discard$Fleet_Name == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
discard
dim(discard)
n = unique(mod1$discard$Fleet)[1:2]
discard = NULL
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
tmp = c(rep("Pikitch", 3), rep("WGCOP", sum(discard[,2]=="WinterN")-3),
rep("Pikitch", 3), rep("WGCOP", sum(discard[,2]=="SummerN")-3))
discard = cbind(discard, tmp)
colnames(discard) = c('Year',
'Fleet',
'Discard Rate',
'Standard Error',
'Data Source')
dim(discard)
head(mod1$catch)
dim(discard)
head(discard)
tail(discard)
n = unique(mod1$discard$Fleet)[3:4]
n
discard = NULL
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
discard
mod1$discard
mod1$discard$Fleet
n
1:length(n)
discard = NULL
for (i in 1:length(n)){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Fleet_Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
discard
tmp = c(rep("WGCOP", sum(discard[,2]=="WinterS")),
rep("WGCOP", sum(discard[,2]=="SummerS")))
discard = cbind(discard, tmp)
colnames(discard) = c('Year',
'Fleet',
'Discard Rate',
'Standard Error',
'Data Source')
value = ifelse(mod1$discard_spec$units[1] == 2, "discard rates", "total discard")
Discard.table = xtable(discard,
digits = 3)
align(Discard.table) = c('l',
'>{\\centering}p{.75in}',
'>{\\centering}p{1.1in}',
'>{\\centering}p{1.1in}',
'>{\\centering}p{1.1in}',
'>{\\centering}p{1.1in}')
RecDevs.all = mod1$recruitpars[grep('Main_RecrDev', rownames(mod1$recruitpars)), c("Value", "Parm_StDev")]
ind = sort(RecDevs.all[, "Value"], index.return = TRUE)$ix[1:4]
find.yr = rownames(mod1$recruitpars[grep('Main_RecrDev', rownames(mod1$recruitpars)), ])
temp = substring(find.yr,14)
recdev.lowest = temp[ind]
ind = sort(RecDevs.all[, "Value"], index.return = TRUE)$ix[(dim(RecDevs.all)[1]-4):dim(RecDevs.all)[1]]
recdev.highest = temp[ind]
recdev.highest
recdev.lowest
find.sb = mod1$derived_quants[grep('SSB', mod1$derived_quants$Label), ]
temp = find.sb[find.sb$Label >= paste('SSB_', Dat_start_mod1, sep='') & find.sb$Label <= paste('SSB_', Dat_end_mod1,  sep=''), ]
ind = sort(temp$Value, index.return = TRUE)$ix[1]
ssb.yr = substring(temp$Label, 5)
low.ssb = ssb.yr[ind]
# Species, common and scientific
spp.up = 'Petrale sole'
spp = 'petrale sole'
spp.sci = 'Eopsetta jordani'
# Define the survey names
nwfsc = 'NWFSC West Coast Groundfish Bottom Trawl Survey'
full.tri = 'AFSC/NWFSC West Coast Triennial Shelf Survey'
tri = "Triennial Survey"
# minimum vulnerable age class
min_age = '3+'
# number of independent assessment models to include in the document
n_models = 1
# model names; if you only have one model the label will just be "model"
mod1_label = "base model"
# Management targets
SPR.target  = 0.30
MT   = 0.25
MSST = 0.125
parm.offset = FALSE
fecund = mod1$SpawnOutputUnits
# Fecundity text depending on the input value above (can change this line if you like)
if(fecund == 'numbers'){fecund_unit='billion eggs'} else {fecund_unit = 'mt'}
if(fecund == 'numbers'){fecund_unit='million eggs'} else {fecund_unit = 'mt'}
# Change these years either here or in the table code if you need to
# First and last years of model model 1
Dat_start_mod1 = mod1$startyr
Dat_end_mod1   = mod1$endyr
# First and last years for the the "recent"  10 years data tables
FirstYR = Dat_end_mod1 - 8       # first year of recent
LastYR  = Dat_end_mod1 + 1       # last year
# Projection years - years where Era is "forecast"
Project_firstyr = min(mod1$timeseries$Yr[mod1$timeseries$Era=='FORE'])
Project_lastyr  = max(mod1$timeseries$Yr[mod1$timeseries$Era=='FORE'])
print.numeric<-function(x, digits) { formatC(x, digits = digits, format = "f") }
comma <- function(x, digits=0) { formatC(x, big.mark=",", digits, format = "f") }
sb.dig = 0
dep.dig = dig3 = 3
dig1 = 1
#' A subset of rich.colors by Arni Magnusson from the gplots package, with the
#' addition of alpha transparency (which is now available in the gplots version
#' as well)
rich.colors.short <- function(n,alpha=1){
x <- seq(0, 1, length = n)
r <- 1/(1 + exp(20 - 35 * x))
g <- pmin(pmax(0, -0.8 + 6 * x - 5 * x^2), 1)
b <- dnorm(x, 0.25, 0.15)/max(dnorm(x, 0.25, 0.15))
rgb.m <- matrix(c(r, g, b), ncol = 3)
rich.vector <- apply(rgb.m, 1, function(v) rgb(v[1], v[2], v[3], alpha=alpha))
}
Final_Catch_AllYrs = read.csv('./txt_files/Petrale_2019_PacFIN_catch_forExpansion.csv')
Exec_catch_sep = Final_Catch_AllYrs
#Exec_catch_sep = Exec_catch_sep [,2:ncol(Exec_catch_sep)]
Exec_catch_sep = Exec_catch_sep[Exec_catch_sep$Year != LastYR, ]
colnames(Exec_catch_sep) = c('Year',  'Winter (N)', 'Summer (N)', 'Winter (S)', 'Summer (S)')
#Plot only years where catch is great than 1 mt total
ind = apply(Exec_catch_sep[,2:ncol(Exec_catch_sep )], 1, sum)
ind = ind > 1
Exec_catch_sep  = Exec_catch_sep[ind,]
# Split catch by regions -retaning the colunns for each -you'll have to edit
Exec_region1_catch = Exec_catch_sep
# Melt data so it can be plotted
Exec_region1_catch = melt(Exec_region1_catch, id='Year')
# Reassign column names
colnames(Exec_region1_catch) = c('Year','Fishery','Removals')
# Plot catches function
Plot_catch = function(Catch_df) {
ggplot(Catch_df, aes(x=Year, y=Removals,fill = Fishery)) +
geom_area(position='stack') +
scale_fill_manual(values= rich.colors.short(dim(Exec_catch_sep)[2]-1)) +
scale_x_continuous(breaks=seq(Dat_start_mod1, Dat_end_mod1, 20)) +
ylab('Landings (mt)')
}
# Read in executive summary catches table
Exec_catch_summary_sep = Final_Catch_AllYrs[, 1:ncol(Final_Catch_AllYrs)]
# Bind the data frames together
Exec_catch_summary = cbind(Exec_catch_summary_sep[,1:5],
apply(Exec_catch_summary_sep[,2:ncol(Exec_catch_summary_sep)], 1, sum))
colnames(Exec_catch_summary) = c('Year',
'Winter (N)',
'Summer (N)',
'Winter (S)',
'Summer (S)',
'Total Landings')
Exec_catch_summary = subset(Exec_catch_summary, Year >= FirstYR-1 & Year <= LastYR-1)
# Make executive summary catch xtable
Exec_catch.table = xtable(Exec_catch_summary,
caption = c(paste0('Landings (mt) for the past 10 years for ',spp,' by source.')),
label='tab:Exec_catch')
# Add alignment - you will have to adjust based on the number of columns you have
# and the desired width, remember to add one leading ghost column for row.names
align(Exec_catch.table) = c('l', 'l',
'>{\\centering}p{0.7in}',
'>{\\centering}p{0.7in}',
'>{\\centering}p{0.7in}',
'>{\\centering}p{0.7in}',
'>{\\centering}p{0.7in}')
#===================
# Retreive data on spawning output and depletion
mod=mod1
mod_area='mod1'
# Extract biomass/output
SpawningB = mod$derived_quants[grep('SSB', mod$derived_quants$Label), ]
SpawningB = SpawningB[c(-1, -2), ]
# Spawning biomass and std.dev data, calculate lower and upper 95% CI
SpawningByrs = SpawningB[SpawningB$Label >= paste('SSB_', FirstYR, sep='')
& SpawningB$Label <= paste('SSB_', LastYR,  sep=''), ]
SpawningByrs$YEAR = seq(FirstYR, LastYR)
SpawningByrs$lowerCI = SpawningByrs$Value + qnorm(0.025) * SpawningByrs$StdDev
SpawningByrs$upperCI = SpawningByrs$Value - qnorm(0.025) * SpawningByrs$StdDev
#SpawningByrs$Value = as.numeric(print(SpawningByrs$Value, digits = sb.dig))
SpawningByrs$Value = round(SpawningByrs$Value, digits = sb.dig)
# Save individual depletion table before CI combined to character
assign(paste('SpawnB_', mod_area, sep = ''), SpawningByrs)
SpawnB = SpawningByrs
# Calculate confidence intervals
SpawningByrs$CI = paste0(print.numeric(SpawningByrs$lowerCI, digits = sb.dig), ' - ', print.numeric(SpawningByrs$upperCI, digits = sb.dig))
SpawningBtab = subset(SpawningByrs, select = c('YEAR', 'Value', 'CI'))
# Assign column names
colnames(SpawningBtab) = c('Year', paste('Spawning Output (', fecund_unit,')',
sep=''), '~ 95% confidence interval')
# Extract Depletion values
Depletion = mod$derived_quants[grep('Bratio', mod$derived_quants$Label), ]
Depletion = Depletion[c(-1, -2), ]
# Estimated depletion, pull out correct years, list years, and estimate 95% CI
Depletionyrs = Depletion[Depletion$Label >= paste('Bratio_', FirstYR,sep='') &
Depletion$Label <= paste('Bratio_', LastYR,sep=''), ]
Depletionyrs$YEAR = seq(FirstYR, LastYR)
#Depletion$Value = as.numeric(comma(Depletion$Value, digits=dep.dig))
Depletionyrs$lowerCI = Depletionyrs$Value + qnorm(0.025)*Depletionyrs$StdDev
Depletionyrs$upperCI = Depletionyrs$Value - qnorm(0.025)*Depletionyrs$StdDev
Depletionyrs$Value = round(Depletionyrs$Value, digits = dep.dig)
# Save individual depletion tables
assign(paste('Deplete_', mod_area, sep=''), Depletionyrs)
Deplete = Depletionyrs
Depletionyrs$CI = paste0(print.numeric(Depletionyrs$lowerCI, digits = dep.dig), ' - ', print.numeric(Depletionyrs$upperCI, digits = dep.dig))
Depletiontab = subset(Depletionyrs, select=c('Value', 'CI'))
colnames(Depletiontab) = c('Estimated depletion', '~ 95% confidence interval')
# Bind the spawning output and depletion data together
Spawn_Deplete = cbind(SpawningBtab, Depletiontab)
colnames(Spawn_Deplete) = c('Year',
paste('Spawning Output (', fecund_unit, ')', sep = ''),
'~ 95% Confidence Interval',
'Estimated Relative Spawning Output',
'~ 95% Confidence Interval')
# Assign a model number to the Spawn_deplete table, if you do cbind within this step
assign(paste('SpawnDeplete_',mod_area,sep=''), Spawn_Deplete)
# 9.1.15 R now won't read the file with any underscores for xtable,
# so use SpawnDeplete without spaces for that
assign(paste('SpawnDeplete',mod_area, sep=''), Spawn_Deplete)
assign(paste('Depl_',mod_area, sep=''), percent(Deplete[nrow(Deplete), 2]))
assign(paste('Depl_',mod_area,'_CI',sep=''),
paste(percent(Deplete[nrow(Deplete), 7]), '-',
percent(Deplete[nrow(Deplete), 8]), sep=''))
assign(paste('Spawn_', mod_area, sep=''), SpawnB[nrow(SpawnB), 2])
assign(paste('Spawn_',mod_area,'_CI',sep=''),
paste(round(SpawnB[nrow(SpawnB), 7],0), '-', round(SpawnB[nrow(SpawnB), 8],0), sep=''))
find.sb = mod1$derived_quants[grep('SSB', mod1$derived_quants$Label), ]
temp = find.sb[find.sb$Label >= paste('SSB_', Dat_start_mod1, sep='') & find.sb$Label <= paste('SSB_', Dat_end_mod1,  sep=''), ]
ind = sort(temp$Value, index.return = TRUE)$ix[1]
ssb.yr = substring(temp$Label, 5)
low.ssb = ssb.yr[ind]
low.ssb
temp
low.dep.value = paste0( round(100*mod1$derived_quants[mod1$derived_quants$Label == paste0("SSB_", low.ssb), 'Value'] /
mod1$derived_quants[mod1$derived_quants$Label == "SSB_Virgin", 'Value'],1), "%")
low.dep.value
low.ssb
find.dep = mod1$derived_quants[grep('Bratio', mod1$derived_quants$Label), ]
find.sb$Label
find.dep = mod1$derived_quants[grep('Bratio', mod1$derived_quants$Label), ]
find.dep
find.dep$Label
temp = find.sb[find.dep$Label >= paste('Bratio_', Dat_start_mod1, sep='') & find.dep$Label <= paste('Bratio_', Dat_end_mod1,  sep=''), ]
temp
ind = sort(temp$Value, index.return = TRUE)$ix[1]
head(temp)
temp = find.sb[find.dep$Label >= paste('Bratio_', Dat_start_mod1, sep='') & find.dep$Label <= paste('Bratio_', Dat_end_mod1,  sep=''), ]
head(temp)
find.dep = mod1$derived_quants[grep('Bratio', mod1$derived_quants$Label), ]
temp = find.sb[find.dep$Label >= paste('Bratio_', Dat_start_mod1, sep='') & find.dep$Label <= paste('Bratio_', Dat_end_mod1,  sep=''), ]
head(temp)
temp
find.dep = mod1$derived_quants[grep('Bratio', mod1$derived_quants$Label), ]
find.dep
temp = find.de[[find.dep$Label >= paste('Bratio_', Dat_start_mod1, sep='') & find.dep$Label <= paste('Bratio_', Dat_end_mod1,  sep=''), ]
dep.vector = tem
ind = sort(temp$Value, index.return = TRUE)$ix[1]
dep.yr = substring(temp$Label, 5)
Tot.catch = aggregate(ret_bio ~ Yr, FUN = sum, mod1$catch)$ret_bio
Tot.catch.df = cbind((Dat_start_mod1-1):Dat_end_mod1, Tot.catch)
temp = sort(Tot.catch.df[,2], index.return = TRUE)$ix
max.catch.5 = Tot.catch.df[(temp[length(temp)]-5):temp[length(temp)],]
Tot.catch.df = as.data.frame(Tot.catch.df)
colnames(Tot.catch.df)<-c("Year", "Catch")
temp = find.de[[find.dep$Label >= paste('Bratio_', Dat_start_mod1, sep='') & find.dep$Label <= paste('Bratio_', Dat_end_mod1,  sep=''), ]
dep.vector = tem
ind = sort(temp$Value, index.return = TRUE)$ix[1]
dep.yr = substring(temp$Label, 5)
Tot.catch = aggregate(ret_bio ~ Yr, FUN = sum, mod1$catch)$ret_bio
Tot.catch.df = cbind((Dat_start_mod1-1):Dat_end_mod1, Tot.catch)
temp = sort(Tot.catch.df[,2], index.return = TRUE)$ix
max.catch.5 = Tot.catch.df[(temp[length(temp)]-5):temp[length(temp)],]
Tot.catch.df = as.data.frame(Tot.catch.df)
colnames(Tot.catch.df)<-c("Year", "Catch")
find.dep
temp = find.dep[find.dep$Label >= paste('Bratio_', Dat_start_mod1, sep='') & find.dep$Label <= paste('Bratio_', Dat_end_mod1,  sep=''), ]
head(temp)
tail(temp)
ind = sort(temp$Value, index.return = TRUE)$ix[1]
dep.yr = substring(temp$Label, 5)
dep.yr
min(dep.vector)
dep.vector = temp$Value
min(dep.vector)
ind = dep.vector < 0.25
dep.vector[ind]
plot(dep.vector)
ind = dep.vector < 0.25
temp$Label[ind[1]]
ind[1]
ind = which(dep.vector < 0.25)
temp$Label[ind[1]]
substring(temp$Label[ind[1]], 5)
substring(temp$Label[ind[1]], 4)
substring(temp$Label[ind[1]], 7)
first.yr.below.target = substring(temp$Label[ind[1]], 8)
ind = which(dep.vector < 0.125)
first.yr.below.thresh = substring(temp$Label[ind[1]], 8)
first.yr.below.thresh
ind
rebuilt.yr = max(ind) + 1
ind = which(dep.vector < 0.25)
rebuilt.yr = max(ind) + 1
rebuilt.yr
find = max(ind) + 1
rebuilt = substring(temp$Label[find], 8)
rebuilt
