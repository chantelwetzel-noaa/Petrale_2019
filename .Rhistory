"\\endhead \n",
"\\hline \n",
"\\multicolumn{6}{l}",
"{\\footnotesize Continued on next page} \n",
"\\endfoot \n",
"\\endlastfoot \n",sep=""))
addtorow$command
Sens_model1 = read.csv('./txt_files/Sensitivities.csv')
head(Sens_model1)
dim(Sens_model1)
file.copy("C:/Assessments/2019/petrale_2019/Models/_sensitivities/tables/Sensitivities.csv", paste0(getwd(), "/txt_files"), overwrite = TRUE)
folders = c("_profiles/plots/", "_retro/plots/", "_sensitivities/plots/")
HomeDir = "C:/Assessments/2019/petrale_2019/Models/"
for (i in 1:length(folders)){
files = list.files(paste0(HomeDir, folders[i]))
for(j in 1:length(files)){
file.copy(paste0(HomeDir,folders[i], files[j]),
paste0(getwd(), "/Figures"), overwrite = TRUE)
}
}
OFL_mod1 = mod1$derived_quants[grep('OFL',mod1$derived_quants$Label),]
OFL_mod1 = OFL_mod1[, 2]
ACL_mod1 = mod1$derived_quants[grep('ForeCatch_',mod1$derived_quants$Label),]
ACL_mod1 = ACL_mod1[,2]
OFL = as.data.frame(cbind(OFL_mod1, ACL_mod1))
OFL$Year=seq(Project_firstyr,Project_lastyr, 1)
OFL$Year = as.factor(OFL$Year)
OFL = OFL[,c(3, 1, 2)]
OFL[,2] =  print.numeric(OFL$OFL_mod1, digits = 0)
OFL[,3] =  print.numeric(OFL$ACL_mod1, digits = 0)
# Extract biomass/output
SpawningB = mod$derived_quants[grep('SSB', mod$derived_quants$Label), ]
SpawningB = SpawningB[c(-1, -2), ]
Spawn.fore = SpawningB[SpawningB$Label >= paste('SSB_', Project_firstyr, sep='')
& SpawningB$Label <= paste('SSB_', Project_lastyr,  sep=''), "Value"]
Spawn.fore = print(Spawn.fore, digits = 0)
Bratio = mod$derived_quants[grep('Bratio', mod$derived_quants$Label), ]
Bratio = Bratio[c(-1, -2), ]
Bratio.fore = Bratio[Bratio$Label >= paste('Bratio_', Project_firstyr, sep='')
& Bratio$Label <= paste('Bratio_', Project_lastyr,  sep=''), "Value"]
Bratio.fore = print(Bratio.fore, digits = 3)
Fore_Table = cbind(OFL, Spawn.fore, Bratio.fore)
colnames(Fore_Table) = c('Year','OFL', "ABC", paste0('Spawning Biomass (',fecund_unit,')'), "Relative Depletion")
model.num = ""
# What model file to use
model.file = "model"
# Cannot change the name below without changing it throughout the Assessment_template file
model.plots = "plots_mod1" #paste0("plot_",model.file)
covar = TRUE
# Give the names of the data and control files, for each model
# Used in the SS_files_linebreaks.R
mod1_dat = "2019_petrale.dat"
# Control file names
mod1_ctrl = "2019_petrale.ctl"
#=====================================================================================
# SECTION1: Run r4ss, parse plotInfoTable.csv file, & add linebreaks to SS files
#=====================================================================================
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales', 'rmarkdown', 'knitr', 'devtools')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
# Install the latest version of r4ss using devtools
# devtools::install_github("r4ss/r4ss", ref = "development")
library(r4ss)
# CHANGE values in this section ===============================================
# number of assessment models - this is run before the R_preamble.R, which also
# contains this value
n_models = 1
# By default, you can only work in the directory containing the project
# Set the directory here if you're getting errors
if (Sys.info()["user"] == "Chantel.Wetzel") {
#setwd('C:/Users/chantell.Wetzel/Documents/GitHub/Petrale_2019')
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
}
# =============================================================================
# set input and output directories
input.dir = file.path(getwd(), 'SS')
output.dir = file.path(getwd(), 'r4ss')
dir.create(file.path(output.dir,model.plots), showWarnings = FALSE)
# BEGIN r4ss===================================================================
# REMOVE OLD r4SS OUTPUT!!!!! -------------------------------------------------
do.call("file.remove", list(list.files(file.path(output.dir, model.plots),
full.names=TRUE))) #, pattern = "!Thumb")))
# Run r4ss for each model - **CHANGE DIRECTORY if necessary**
mod1 = SS_output(dir = file.path(input.dir,model.file), forecast=T, printstats = FALSE)
# Save the workspace an image
save.image('./r4ss/SS_output.RData')
#=====================================================================================
# SECTION 2: RUN r4ss plots for each model & save files
#=====================================================================================
out.dir.mod1 = file.path(output.dir,model.plots)
fleets.in = c("Winter (N)", "Summer (N)", "Winter (S)", "Summer (S)",
"Triennial - Early",
"Triennial - Late",
#"AFSC/NFSC West Coast Triennial Shelf Survey - Early",
#"AFSC/NWFSC West Coast Triennial Shelf Survey - Late",
"NWFSC West Coast Groundfish Bottom Trawl Survey")
# Model 1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets.in,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
#=====================================================================================
# SECTION 3: Source other dependent code
#=====================================================================================
# Source the figures that are created based on the model results
source('./Rcode/Figures.R')
# Run the code to parse the plotInfoTable files
source('./Rcode/Parse_r4ss_plotInfoTable.R')
folders = c("_profiles/plots/", "_retro/plots/", "_sensitivities/plots/", "3.0_base/data_plots")
HomeDir = "C:/Assessments/2019/petrale_2019/Models/"
for (i in 1:length(folders)){
files = list.files(paste0(HomeDir, folders[i]))
for(j in 1:length(files)){
file.copy(paste0(HomeDir,folders[i], files[j]),
paste0(getwd(), "/Figures"), overwrite = TRUE)
}
}
folders = c("_profiles/plots/", "_retro/plots/", "_sensitivities/plots/", "3.0_base/data_plots/")
HomeDir = "C:/Assessments/2019/petrale_2019/Models/"
for (i in 1:length(folders)){
files = list.files(paste0(HomeDir, folders[i]))
for(j in 1:length(files)){
file.copy(paste0(HomeDir,folders[i], files[j]),
paste0(getwd(), "/Figures"), overwrite = TRUE)
}
}
names(mod1)
ret = mod1$sizeselex[mod1$sizeselex$Factor == "Ret", ]
ret[ret$Fleet == 1 & ret$Sex == 1 & ret$Yr %in% c(2002, 2003, 2010, 2011), ]
ret[ret$Fleet == 2 & ret$Sex == 1 & ret$Yr %in% c(2002, 2003, 2009, 2011), ]
ret[ret$Fleet == 3 & ret$Sex == 1 & ret$Yr %in% c(2002, 2003, 2010, 2011), ]
ret[ret$Fleet == 4 & ret$Sex == 1 & ret$Yr %in% c(2002, 2003, 2009, 2011), ]
harmonic = read.csv('./txt_files/DirichletWeights.csv')
harmonic
exp(harmonic[,2])
age.parm = exp(harmonic[,3])
len.parm = exp(harmonic[,2])
age.parm = c(exp(harmonic[1:4,3]), '-', '-', exp(harmonic[7, 3]))
exp(harmonic[1:4,3])
harmonic
harmonic[1:4,3]
exp(as.numeric(harmonic[1:4,3]))
as.numeric(harmonic[1:4,3])
harmonic = read.csv('./txt_files/DirichletWeights.csv')
harmonic = read.csv('./txt_files/DirichletWeights.csv')
harmonic
harmonic[,3]
exp(harmonic[,2])
harmonic[1:4,3]
exp(harmonic[1:4,3])
age.parm = exp(harmonic[,3])
age.parm
len.parm = exp(harmonic[,2])
age.parm = exp(harmonic[,3])
len.theta = len.parm / (1 + len.parm)
age.theta = age.parm / (1+ age.parm)
age.theta
harm.new = cbind(harmonic, len.parm, age.parm, len.theta, age.theta)
harm.new
harm.new[5:6, c(3,5,7)]
harm.new[5:6, c(3,5,7)] = '-'
harm.new
harmonic = read.csv('./txt_files/DirichletWeights.csv')
len.parm = round(exp(harmonic[,2]),0)
age.parm = round(exp(harmonic[,3]),0)
len.theta = round(len.parm / (1 + len.parm),3)
age.theta = round(age.parm / (1+ age.parm),3)
harm.new = cbind(harmonic, len.parm, age.parm, len.theta, age.theta)
harm.new[5:6, c(3,5,7)] = '-'
harm.new
harmonic = read.csv('./txt_files/DirichletWeights.csv')
len.parm = round(exp(harmonic[,2]),0)
age.parm = round(exp(harmonic[,3]),0)
len.theta = round(len.parm / (1 + len.parm),3)
age.theta = round(age.parm / (1+ age.parm),3)
harm.new = cbind(harmonic, len.parm, age.parm, len.theta, age.theta)
harm.new[5:6, c(3,5,7)] = '-'
colnames(harm.new) = c('Fleet',
'log(Lengths Parm)',
'log(Ages Parm)',
'Lengths',
'Ages',
'Lengths Theta',
'Ages Theta')
Harmonic.table = xtable(harm.new,
caption = c('Data weights applied when using Dirichlet data weighting. SS estimates these parameters in log-space. The estimated parameter values in log-space, converted to real-space, and the resulting theta values, the adjustment factor to the input sample sizes, are provided'),
label = 'tab:dirichlet',
digits = 3)
Harmonic.table
Harmonic.table = xtable(harm.new,
caption = c('Data weights applied when using Dirichlet data weighting. SS estimates these parameters in log-space. The estimated parameter values in log-space, converted to real-space, and the resulting theta values, the adjustment factor to the input sample sizes, are provided'),
label = 'tab:dirichlet',
digits = c(0, 3, 3, 0, 0, 3, 3))
Harmonic.table
align(Harmonic.table) = c('l',
'>{\\raggedright}p{2in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}')
print(Harmonic.table,
include.rownames=FALSE,
caption.placement='top',
sanitize.text.function = function(x){x})
print(Harmonic.table,
include.rownames=FALSE,
caption.placement='top',
sanitize.text.function = function(x){x})
Harmonic.table = xtable(harm.new,
caption = c('Data weights applied when using Dirichlet data weighting. SS estimates these parameters in log-space. The estimated parameter values in log-space, converted to real-space, and the resulting theta values, the adjustment factor to the input sample sizes, are provided'),
label = 'tab:dirichlet',
digits = c(0, 0, 3, 3, 0, 0, 3, 3))
align(Harmonic.table) = c('l',
'>{\\raggedright}p{2in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}',
'>{\\centering}p{.7in}')
print(Harmonic.table,
include.rownames=FALSE,
caption.placement='top',
sanitize.text.function = function(x){x})
sanitize.text.function = function(x){x})
age.theta
len.theta
len.theta = round(len.parm / (1 + len.parm),3)
len.theta
head(LenComp_mod1)
LenComp_mod1[,"basename"]
pmatch(LenComp_mod1, "comp_lenfit_flt1")
pmatch(LenComp_mod1$basename, "comp_lenfit_flt1")
pmatch("comp_lenfit_flt1", LenComp_mod1$basename)
pmatch("comp_lenfit_flt", LenComp_mod1$basename)
pmatch("comp_", LenComp_mod1$basename)
LenComp_mod1$basename
pmatch("comp_lenfit_flt", LenComp_mod1$basename, dup = TRUE)
grep("comp_lenfit_flt", LenComp_mod1$basename)
LenComp_mod1$basename
plot.vec = grep("comp_agefit_flt", LenComp_mod1$basename)
plot.vec
plot.vec = grep("comp_agefit_flt", AgeComp_mod1$basename)
plot.vec
harmonic = read.csv('./txt_files/DirichletWeights.csv')
harmonic
harmonic = read.csv('./txt_files/FrancisWeights.csv')
harmonic
harmonic$Fleet[5:7] = c('Trienial Early Survey', 'Triennial Late Survey', 'NWFSC WCGBT Survey')
harmonic[1, 5:7] = c('Trienial Early Survey', 'Triennial Late Survey', 'NWFSC WCGBT Survey')
harmonic[1, 5:7]
harmonic = read.csv('./txt_files/FrancisWeights.csv')
harmonic
rm(list=ls(all=TRUE))
model.num = ""
# What model file to use
model.file = "model"
# Cannot change the name below without changing it throughout the Assessment_template file
model.plots = "plots_mod1" #paste0("plot_",model.file)
covar = TRUE
# Give the names of the data and control files, for each model
# Used in the SS_files_linebreaks.R
mod1_dat = "2019_petrale.dat"
# Control file names
mod1_ctrl = "2019_petrale.ctl"
#=====================================================================================
# SECTION1: Run r4ss, parse plotInfoTable.csv file, & add linebreaks to SS files
#=====================================================================================
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales', 'rmarkdown', 'knitr', 'devtools')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
# Install the latest version of r4ss using devtools
# devtools::install_github("r4ss/r4ss", ref = "development")
library(r4ss)
# CHANGE values in this section ===============================================
# number of assessment models - this is run before the R_preamble.R, which also
# contains this value
n_models = 1
# By default, you can only work in the directory containing the project
# Set the directory here if you're getting errors
if (Sys.info()["user"] == "Chantel.Wetzel") {
#setwd('C:/Users/chantell.Wetzel/Documents/GitHub/Petrale_2019')
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
}
# =============================================================================
# set input and output directories
input.dir = file.path(getwd(), 'SS')
output.dir = file.path(getwd(), 'r4ss')
dir.create(file.path(output.dir,model.plots), showWarnings = FALSE)
# BEGIN r4ss===================================================================
# REMOVE OLD r4SS OUTPUT!!!!! -------------------------------------------------
do.call("file.remove", list(list.files(file.path(output.dir, model.plots),
full.names=TRUE))) #, pattern = "!Thumb")))
# Run r4ss for each model - **CHANGE DIRECTORY if necessary**
mod1 = SS_output(dir = file.path(input.dir,model.file), forecast=T, printstats = FALSE)
# Save the workspace an image
save.image('./r4ss/SS_output.RData')
#=====================================================================================
# SECTION 2: RUN r4ss plots for each model & save files
#=====================================================================================
out.dir.mod1 = file.path(output.dir,model.plots)
fleets.in = c("Winter (N)", "Summer (N)", "Winter (S)", "Summer (S)",
"Triennial - Early",
"Triennial - Late",
#"AFSC/NFSC West Coast Triennial Shelf Survey - Early",
#"AFSC/NWFSC West Coast Triennial Shelf Survey - Late",
"NWFSC West Coast Groundfish Bottom Trawl Survey")
# Model 1
SS_plots(mod1,
png = TRUE,
html = TRUE,
datplot = TRUE,
uncertainty = covar,
fleetnames = fleets.in,
maxrows = 4,
maxcols = 4,
maxrows2 = 4,
maxcols2 = 4,
printfolder = '',
bub.scale.dat= 6,
dir = out.dir.mod1)
#=====================================================================================
# SECTION 3: Source other dependent code
#=====================================================================================
# Source the figures that are created based on the model results
source('./Rcode/Figures.R')
# Run the code to parse the plotInfoTable files
source('./Rcode/Parse_r4ss_plotInfoTable.R')
folders = c(
"NWFSC_Combo/plots/",
"Triennial/early/plots/",
"Triennial/late/plots/",
"Biology/plots/",
"Assessment_History/plots/"
)
HomeDir = "C:/Assessments/2019/petrale_2019/Data/"
for (i in 1:length(folders)){
files = list.files(paste0(HomeDir, folders[i]))
for(j in 1:length(files)){
file.copy(paste0(HomeDir,folders[i], files[j]),
paste0(getwd(), "/Figures"), overwrite = TRUE)
}
}
folders = c("_profiles/plots/", "_retro/plots/", "_sensitivities/plots/", "3.0_base/data_plots/")
HomeDir = "C:/Assessments/2019/petrale_2019/Models/"
for (i in 1:length(folders)){
files = list.files(paste0(HomeDir, folders[i]))
for(j in 1:length(files)){
file.copy(paste0(HomeDir,folders[i], files[j]),
paste0(getwd(), "/Figures"), overwrite = TRUE)
}
}
folders = c(
"NWFSC_Combo/forSS/nwfsc_combo_length_sample_size.csv",
"NWFSC_Combo/forSS/nwfsc_combo_age_sample_size.csv",
"Triennial/early/forSS/triennial_early_length_sample_size.csv",
"Triennial/late/forSS/triennial_late_length_sample_size.csv"
)
HomeDir = "C:/Assessments/2019/petrale_2019/Data/"
for (i in 1:length(folders)){
file.copy(paste0(HomeDir,folders[i]),
paste0(getwd(), "/txt_files"), overwrite = TRUE)
}
file.copy("C:/Assessments/2019/petrale_2019/Models/_sensitivities/tables/Sensitivities.csv", paste0(getwd(), "/txt_files"), overwrite = TRUE)
file.copy(paste0(HomeDir, "Commercial_Comps/forSS/Fishery_Age_Samples.csv"), paste0(getwd(), "/txt_files"), overwrite = TRUE)
file.copy(paste0(HomeDir, "Commercial_Comps/forSS/Fishery_Length_Samples.csv"), paste0(getwd(), "/txt_files"), overwrite = TRUE)
#=====================================================================================
# SECTION 5: Create Numbers at Age Table
#=====================================================================================
base      <- readLines( paste0(getwd(),"/SS/", model.file, "/Report.sso"))
# First and last years of model model 1
startyr = mod1$startyr # year model 1 data starts
endyr   = mod1$endyr   # year model 1 data ends
maxAge = length(strsplit(base[grep(paste("1 1 1 1 1 1 1", startyr,sep=" "),base)]," ")[[1]]) - 14
temp = mapply(function(x) temp = as.numeric(strsplit(base[grep(paste("1 1 1 1 1 1 1", x,sep=" "),base)]," ")[[1]][14:(14+maxAge)]), x = startyr:endyr)
natage.f = t(temp)
temp = mapply(function(x) temp = as.numeric(strsplit(base[grep(paste("1 1 2 1 1 1 2", x,sep=" "),base)]," ")[[1]][14:(14+maxAge)]), x = startyr:endyr)
natage.m = t(temp)
colnames(natage.f) = 0:maxAge; colnames(natage.m) = 0:maxAge
rownames(natage.f) <- startyr:endyr ; rownames(natage.m) <- startyr:endyr
write.csv(natage.f, paste0(getwd(), "/txt_files/Petrale_natage_f.csv"))
write.csv(natage.m, paste0(getwd(), "/txt_files/Petrale_natage_m.csv"))
#=====================================================================================
# SECTION 6: Functions
#=====================================================================================
print.numeric<-function(x, digits) { formatC(x, digits = digits, format = "f") }
comma <- function(x, digits=0) { formatC(x, big.mark=",", digits, format = "f") }
find = grep("comp_lenfit_flt1mkt1", LenComp_mod1$basename)
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales')
for(p in requiredPackages){
library(p,character.only = TRUE)
}
# Change options
options(xtable.comment = FALSE)  # turns off xtable comments
options(scipen=999)              # turns off scientific notation
# Load workspace image of the BASE MODEL(S) from SS_output in r4ss
load("./r4ss/SS_output.RData")
# =============================================================================
# VARIABLES TO EDIT
# =============================================================================
# Species, common and scientific
spp.up = 'Petrale sole'
spp = 'petrale sole'
spp.sci = 'Eopsetta jordani'
# Define the survey names
nwfsc = 'NWFSC West Coast Groundfish Bottom Trawl Survey'
full.tri = 'AFSC/NWFSC West Coast Triennial Shelf Survey'
tri = "Triennial Survey"
# minimum vulnerable age class
min_age = '3+'
# number of independent assessment models to include in the document
n_models = 1
# model names; if you only have one model the label will just be "model"
mod1_label = "base model"
# Management targets
SPR.target  = 0.30
MT   = 0.25
MSST = 0.125
# Set if males are estimated as an offset to females
parm.offset = FALSE
# -----------------------------------------------------------------------------
# Fecundity relationship
# whether spawning output is billions of eggs (fecundity relationship on) or
# mt (no fecundity relationship)
fecund = mod1$SpawnOutputUnits
# Fecundity text depending on the input value above (can change this line if you like)
if(fecund == 'numbers'){fecund_unit='billion eggs'} else {fecund_unit = 'mt'}
if(fecund == 'numbers'){fecund_unit='million eggs'} else {fecund_unit = 'mt'}
# Change these years either here or in the table code if you need to
# First and last years of model model 1
Dat_start_mod1 = mod1$startyr
Dat_end_mod1   = mod1$endyr
# First and last years for the the "recent"  10 years data tables
FirstYR = Dat_end_mod1 - 8       # first year of recent
LastYR  = Dat_end_mod1 + 1       # last year
# Projection years - years where Era is "forecast"
Project_firstyr = min(mod1$timeseries$Yr[mod1$timeseries$Era=='FORE'])
Project_lastyr  = max(mod1$timeseries$Yr[mod1$timeseries$Era=='FORE'])
# -----------------------------------------------------------------------------
# =============================================================================
# Load in the plotInfoTable and parse the table as an option to use for figures
for(imod in 1:n_models) {
if (imod==1) {
mod_num = 'mod1'
} else {
if (imod==2) {
mod_num = 'mod2'
} else {
mod_num = 'mod3'
}}
# Read in the plotInfoTable.csv containining the list of plots created from r4SS
plotInfoTable = read.csv(paste0('./r4ss/plots_',mod_num,'/plotInfoTable_',mod_num,'_final.csv'))
# Replace the @ in A@L with AAL and the - in S-R with S_R
# And get rid of other funny characters
plotInfoTable$category = gsub('@', 'A', plotInfoTable$category)
plotInfoTable$category = gsub('-', '_', plotInfoTable$category)
plotInfoTable$caption  = gsub('@', 'A', plotInfoTable$caption)
plotInfoTable$caption  = gsub('-', '_', plotInfoTable$caption)
plotInfoTable$caption  = gsub('<br>|<blockquote>|</i>|<i>|</blockquote>',
' ',plotInfoTable$caption)
# Change factors to strings
plotInfoTable = data.frame(lapply(plotInfoTable, as.character), stringsAsFactors=FALSE)
# Pull out the different categories of plots, e.g., Bio, Sel, Timeseries, etc
categories = as.vector(unique(plotInfoTable$category))
# Create a dataframe for each category - because you're running these from a
# .R file, you can view all of these dataframes in the Environment
for(icat in 1:length(categories)){
dummy_df = data.frame()
dummy_df = subset(plotInfoTable,category==categories[icat])
dummy_df = data.frame(lapply(dummy_df, as.character), stringsAsFactors=FALSE)
#dummy_df$label = substr(dummy_df$basename,1, nchar(dummy_df$basename)-4)
dummy_df$label = substr(dummy_df$file,1, nchar(dummy_df$file)-4)
dummy_df$filepath = paste0('./r4ss/plots_',mod_num,'/',dummy_df$basename)
assign(paste0(categories[icat],'_',mod_num),dummy_df)
}
} # end n_models
# multiple models
multi_page_fig = c('page2', 'page3', 'page4', 'page5', 'page6', 'page7')
# Give plotInfoTable columns to use to paste in info for the
# caption, label and file path
caption_col = 2
label_col = 10
path_col =  1
find = grep("comp_lenfit_flt1mkt1", LenComp_mod1$basename)
find
find = which(LenComp_mod1$basename == "comp_lenfit_residsflt1mkt1.png")
find
LenComp_mod1$basename
find = grep("comp_lenfit_residsflt3mkt1", LenComp_mod1$basename)
find
find = grep("comp_agefit_residsflt1mkt2", AgeComp_mod1$basename)
find
plot.vec = c(4:9)
cat('\n![', AALComp_mod1[plot.vec[a],caption_col], ' \\label{fig:nwfsc_combo_andre_',a,'}](r4ss/plots_mod1/', AALComp_mod1[plot.vec[a], path_col], ')\n', sep='')
AALComp_mod1[plot.vec[a],caption_col]
AALComp_mod1[,caption_col]
AALComp_mod1$basename
