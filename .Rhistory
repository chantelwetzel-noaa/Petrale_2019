plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = 16,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"] + wt.parameters[rockfish.wt,"mat.slope"]+wt.parameters[rockfish.wt,"mat.size"])
lm
summary(lm0)
summary(lm)
pval = anova(lm)
pval
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]+wt.parameters[rockfish.wt,"mat.size"])
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]+wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]*wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = glm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]*wt.parameters[rockfish.wt,"mat.slope"])
summary(lm)
lm = glm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
summary(glm())
summary(glm
)
glm()
summary(lm)
all = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
lm = glm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]*wt.parameters[,"mat.slope"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+wt.parameters[,"mat.slope"]+wt.parameters[,"h"]+wt.parameters[,"k"])
all = glm(weighted.sigma[xx,]~wt.parameters[,"m"]+
wt.parameters[,"mat.slope"]+
wt.parameters[,"steep"]+
wt.parameters[,"k"])
summary(all)
plot(all)
all.rock = glm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
all.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"]+
wt.parameters[rockfish.wt,"mat.slope"]+
wt.parameters[rockfish.wt,"steep"]+
wt.parameters[rockfish.wt,"k"])
plot(all.rock)
m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"m"])
plot(m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
plot(lratio.m.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.m.int.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]*wt.parameters[rockfish.wt,"m"])
summary(lratio.m.int.rock)
lratio.m.rock = lm(weighted.sigma[xx,rockfish.wt]~wt.parameters[rockfish.wt,"lratio"]+wt.parameters[rockfish.wt,"m"])
summary(lratio.m.rock)
lratio.rock = lm(weighted.sigma[xx,rockfish.wt]~log(wt.parameters[rockfish.wt,"lratio"]))
plot(lratio.rock)
lratio.rock = lm(log(weighted.sigma[xx,rockfish.wt])~wt.parameters[rockfish.wt,"lratio"])
plot(lratio.rock)
summary(lratio.rock)
wt.pch.vec = c(rep(16,3), 17, 15, rep(16,3), 18, rep(17,2), 18, 17, rep(16, 4))
# Uncertainty vs. Maturity, Length, Ratio w/ Linear model Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
###############################################################################################
# Uncertainty vs. M  and Lratio by LH Weighted
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm_LH_4.png", w = 6, h = 6)
par(mfrow = c(2,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[rockfish.wt,"m"],weighted.sigma[xx,rockfish.wt] * convert, type = 'p', col = blue, pch = 16,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("a) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Rockfish")
plot( wt.parameters[roundfish.wt,"m"], weighted.sigma[xx,roundfish.wt] * convert, type = 'p', col = green, pch = 17,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(paste("b) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 3, "Roundfish")
plot(wt.parameters[rockfish.wt,"lratio"], weighted.sigma[xx,rockfish.wt] * convert,  type = 'p', col = blue, pch = 16,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,rockfish.wt]*convert)~wt.parameters[rockfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("c) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
plot(wt.parameters[roundfish.wt,"lratio"], weighted.sigma[xx,roundfish.wt] * convert,  type = 'p', col = green, pch = 17,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,roundfish.wt]*convert)~wt.parameters[roundfish.wt,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(paste("d) ",R^2)), xy = c(0.11, 0.90)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.30, 0.88))
mtext(side = 2, expression(sigma), outer = T, line = 2)
dev.off()
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, lwd = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 2,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(paste(expression(R^2), " = ", round(summary(lm)$r.squared,3)), xy = c(0.15, 0.95))
par(mfrow = c(1,1), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( parameters[,"m"],stand.sigma[xx,] * convert, type = 'p', col = col.vec, pch = 16, cex = 1.5,
xlim = c(0, max(parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = "Natural Mortality", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((stand.sigma[xx,]*convert)~parameters[,"m"]); pval = anova(lm)
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
wt.col.vec = c(rep(blue,3), green, 'darkgrey', rep(blue,3), red, rep(green,2), red, green, rep(blue, 4))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 2,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
###############################################################################################
convert = 1 ; step = ifelse(convert, 0.5, 0.2)
xx = dim(weighted.sigma)[1]
ymax = max(weighted.sigma[xx,])*convert + 0.10
ymin = ifelse(convert == 1, 1, 0.30)
pngfun("Wt_bio_with_lm.png", w = 6, h = 8)
par(mfrow = c(4,2), mar = c(4, 0.75, 2,0.75), oma = c(2,4,2,2))
plot( wt.parameters[,"m"],weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, max(wt.parameters[,"m"])+0.05), ylim = c(ymin, ymax),
xlab = expression(paste("Natural Mortality (M) ", yr^-1)), ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"m"]); pval = anova(lm)
abline(a = lm[1], b = lm[2]);
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"sigmaR"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.25, 1.1), ylim = c(ymin, ymax),
xlab = expression(paste("Variation in Recruitment ", "(",sigma[R], ")")), ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(0.30, 1.1, 0.20)); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"sigmaR"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.slope"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"mat.slope"])-0.05, max(wt.parameters[,"mat.slope"])+0.05), ylim = c(ymin, ymax),
xlab = "Slope of Maturity", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.slope"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"mat.size"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(10, max(wt.parameters[,"mat.size"])+2), ylim = c(ymin, ymax),
xlab = "Length at 50% Maturity (cm)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"mat.size"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot( wt.parameters[,"linf"], weighted.sigma[xx,] * convert, type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"linf"])-2, max(wt.parameters[,"linf"])+2), ylim = c(ymin, ymax),
xlab = "Maximum Length (cm)", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(30, 110, 20)); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert) ~ wt.parameters[,"linf"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"lratio"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(min(wt.parameters[,"lratio"])-0.15, 2), ylim = c(ymin, ymax),
xlab = "Max. Length / 50% Maturity", ylab = expression(sigma), axes = F)
axis(side = 1, at = seq(1.0, 2, 0.2) ); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"lratio"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"k"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0, 0.40), ylim = c(ymin, ymax),
xlab = "Brody growth coefficient (k)", ylab = expression(sigma), axes = F)
axis(side = 1); axis(side = 2, at = seq(ymin, ymax, step), las = 1); box()
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"k"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
plot(wt.parameters[,"steep"], weighted.sigma[xx,] * convert,  type = 'p', col = wt.col.vec, pch = wt.pch.vec, cex = 1.5,
xlim = c(0.40, 1), ylim = c(ymin, ymax),
xlab = "Steepness (h)", ylab = expression(sigma), axes = F)
axis(side = 1); box()
mtext(side = 2, expression(sigma), outer = T, line = 2)
lm = lm((weighted.sigma[xx,]*convert)~wt.parameters[,"steep"]); pval = anova(lm)
abline(a = lm[1], b = lm[2])
print.letter(expression(R^2), xy = c(0.07, 0.92)); print.letter(paste("=", round(summary(lm)$r.squared,2)), xy = c(0.20, 0.92))
dev.off()
library(sss)
a = 1
plot()
plot(0,0)
library("sss", lib.loc="C:/Program Files/R/R-3.4.3/library")
detach("package:sss", unload=TRUE)
wd = "C:/_Research/Steepness_Weighting/models"
stocks = c("aurora", "black_ca", "black_or", "black_wa", "blackgill", "blue_deacon_ca",
"blue_deacon_or", "bocaccio", "canary", "chilipepper", "china_c", "china_n",
"china_s", "darkblotched", "greenspotted_n", "greenspotted_s", "greenstriped",
"pop", "rougheye", "splitnose", "widow", "yelloweye", "yellowtail_n")
a
a=1
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),')\n',sep='')
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
for (a in 1:length(stocks))
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
}
for (a in 1:length(stocks)){
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n',sep='')
}
for (a in 1:length(stocks)){
dir = paste0(wd, "/", stocks[a], "/_profile_h.png")
name = stocks[a]
cat('\n![', stocks[a], '\\label{none}](', paste0(wd, '/', stocks[a]),'/_profile_h.png)\n', sep='')
cat('\newpage')
}
cat('\n\newpage\n')
cat('\n, '\newpage',\n')
cat('\n\newpage\n')
cat('\n\\newpage\n')
source('C:/Users/Chantel.Wetzel/Documents/GitHub/R0_forecast_uncertainty/R/0_eval_plot_code.R')
stand.sigma
`r round(median(stand.sigma[dim(stand.sigma)[1],rockfish]) * 0.36, 2)`
round(median(stand.sigma[dim(stand.sigma)[1],rockfish]) * 0.36, 2)
round(median(stand.sigma[dim(stand.sigma)[1],]) * 0.36, 2)
round(exp(qnorm(0.45, 0, median(stand.sigma[dim(stand.sigma)[1],flatfish]) * 0.36)), 2)
round(exp(qnorm(0.45, 0, median(stand.sigma[dim(stand.sigma)[1],]) * 0.36)), 2)
round(exp(qnorm(0.45, 0, median(stand.sigma[dim(stand.sigma)[1],1]) * 0.36)), 2)
round(exp(qnorm(0.45, 0, median(stand.sigma[dim(stand.sigma)[1],1]) * 0.36)), 3)
round(median(stand.sigma[dim(stand.sigma)[1],flatfish]) * 0.36, 2)
round(median(stand.sigma[dim(stand.sigma)[1],]) * 0.36, 2)
dim(stand.sigma)[1]
getwd()
install.packages("bookdown")
library(bookdown)
bookdown::render_book("Bookdown.Rmd", "bookdown::pdf_book")
setwd("C:/_Research/bookdown_test")
bookdown::render_book("Bookdown.Rmd", "bookdown::pdf_book")
exp(qnorm(0.45, 0, 1))
exp(0.36* qnorm(0.45, 0, 1))
round(stand.sigma[dim(stand.sigma)[1],"dover"],1)
round(stand.sigma[dim(stand.sigma)[1],],1)
min(round(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", black.ca")]))
)
min(round(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]))
min(round(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),1)
min(round(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),2)
max(round(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),2)
max(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")])
max(round(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),3)
round(max(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),2)
round(min(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", black.ca")]))
round(min(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]))
round(min(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),1)
round(min(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),2)
round(min(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),4)
round(min(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),1)
paste(round(min(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),1), "-", round(max(stand.sigma[dim(stand.sigma)[1], c("aurora", "yelloweye", "splitnose", "black.ca")]),1))
Tot.catch.df
RecDevs.all = mod1$recruitpars[grep('Main_RecrDev', rownames(mod1$recruitpars)), c("Value", "Parm_StDev")]
model.num = ""
# What model file to use
model.file = "model"
# Cannot change the name below without changing it throughout the Assessment_template file
model.plots = "plots_mod1" #paste0("plot_",model.file)
covar = TRUE
# Give the names of the data and control files, for each model
# Used in the SS_files_linebreaks.R
mod1_dat = "data.ss"
# Control file names
mod1_ctrl = "control.ss"
requiredPackages = c('xtable', 'ggplot2', 'reshape2', 'scales', 'rmarkdown', 'knitr', 'devtools')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
# Install the latest version of r4ss using devtools
# r4ss sha # 06b8250
# devtools::install_github("r4ss/r4ss", ref = '1.27.0', force = TRUE)
library(r4ss)
n_models = 1
if (Sys.info()["user"] == "Chantel.Wetzel") {
setwd('C:/Users/chantell.Wetzel/Documents/GitHub/Petrale_2019')
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
}
getwd()
setwd('C:/Users/Chantel.Wetzel/Documents/GitHub/Petrale_2019')
input.dir = file.path(getwd(), 'SS')
output.dir = file.path(getwd(), 'r4ss')
mod1 = SS_output(dir = file.path(input.dir,model.file), forecast=T, printstats = FALSE)
names(mod1)
mod1$recruitpars[grep('Main_RecrDev', rownames(mod1$recruitpars)), c("Value", "Parm_StDev")]
RecDevs.all = mod1$recruitpars[grep('Main_RecrDev', rownames(mod1$recruitpars)), c("Value", "Parm_StDev")]
ind = sort(RecDevs.all[, "Value"], index.return = TRUE)$ix[1:4]
find.yr = rownames(mod1$recruitpars[grep('Main_RecrDev', rownames(mod1$recruitpars)), ])
temp = substring(find.yr,14)
recdev.lowest = temp[ind]
recdev.lowest
sort(RecDevs.all[, "Value"], index.return = TRUE)$ix[1:4]
dim(RecDevs.all)
sort(RecDevs.all[, "Value"], index.return = TRUE)$ix[(dim(RecDevs.all)[1]-4):dim(RecDevs.all)[1]]
find.yr = rownames(mod1$recruitpars[grep('Main_RecrDev', rownames(mod1$recruitpars)), ])
temp = substring(find.yr,14)
temp[ind]
recdev.lowest
sort(RecDevs.all[, "Value"], index.return = TRUE)$ix
sort(RecDevs.all[, "Value"], index.return = TRUE)$ix[(dim(RecDevs.all)[1]-4):dim(RecDevs.all)[1]]
ind = sort(RecDevs.all[, "Value"], index.return = TRUE)$ix[(dim(RecDevs.all)[1]-4):dim(RecDevs.all)[1]]
temp[ind]
recdev.highest = temp[ind]
RecDevs.all
recdev.highest
find.sb = mod$derived_quants[grep('SPB', mod$derived_quants$Label), ]
temp = find.sb[find.sb$Label >= paste('SPB_', Dat_start_mod1, sep='') & find.sb$Label <= paste('SPB_', Dat_end_mod1,  sep=''), ]
ind = sort(temp$Value, index.return = TRUE)$ix[1]
ssb.yr = substring(temp$Label, 5)
low.ssb = ssb.yr[ind]
names(mod$derived_quants)
names(mod1$derived_quants)
mod1$derived_quants["Label",]
mod1$derived_quants
find.sb = mod1$derived_quants[grep('SSB', mod$derived_quants$Label), ]
find.sb = mod1$derived_quants[grep('SSB', mod1$derived_quants$Label), ]
temp = find.sb[find.sb$Label >= paste('SSB_', Dat_start_mod1, sep='') & find.sb$Label <= paste('SPB_', Dat_end_mod1,  sep=''), ]
aste0( round(100*mod1$derived_quants[mod1$derived_quants$Label == paste0("SSB_", low.ssb), 'Value'] /
mod$derived_quants[mod$derived_quants$Label == "SSB_Virgin", 'Value'],1), "%")
paste0( round(100*mod1$derived_quants[mod1$derived_quants$Label == paste0("SSB_", low.ssb), 'Value'] /
mod$derived_quants[mod$derived_quants$Label == "SSB_Virgin", 'Value'],1), "%")
Dat_start_mod1 = mod1$startyr
Dat_end_mod1   = mod1$endyr
FirstYR = Dat_end_mod1 - 8       # first year of recent
LastYR  = Dat_end_mod1 + 1       # last year
find.sb = mod1$derived_quants[grep('SSB', mod1$derived_quants$Label), ]
temp = find.sb[find.sb$Label >= paste('SSB_', Dat_start_mod1, sep='') & find.sb$Label <= paste('SPB_', Dat_end_mod1,  sep=''), ]
ind = sort(temp$Value, index.return = TRUE)$ix[1]
ssb.yr = substring(temp$Label, 5)
low.ssb = ssb.yr[ind]
low.dep.value = paste0( round(100*mod1$derived_quants[mod1$derived_quants$Label == paste0("SSB_", low.ssb), 'Value'] /
mod$derived_quants[mod$derived_quants$Label == "SSB_Virgin", 'Value'],1), "%")
find.sb = mod1$derived_quants[grep('SSB', mod1$derived_quants$Label), ]
temp = find.sb[find.sb$Label >= paste('SSB_', Dat_start_mod1, sep='') & find.sb$Label <= paste('SSB_', Dat_end_mod1,  sep=''), ]
ind = sort(temp$Value, index.return = TRUE)$ix[1]
ssb.yr = substring(temp$Label, 5)
low.ssb = ssb.yr[ind]
low.ssb
paste0( round(100*mod1$derived_quants[mod1$derived_quants$Label == paste0("SSB_", low.ssb), 'Value'] /
mod1$derived_quants[mod$derived_quants$Label == "SSB_Virgin", 'Value'],1), "%")
paste0( round(100*mod1$derived_quants[mod1$derived_quants$Label == paste0("SSB_", low.ssb), 'Value'] /
mod1$derived_quants[mod1$derived_quants$Label == "SSB_Virgin", 'Value'],1), "%")
low.dep.value = paste0( round(100*mod1$derived_quants[mod1$derived_quants$Label == paste0("SSB_", low.ssb), 'Value'] /
mod1$derived_quants[mod1$derived_quants$Label == "SSB_Virgin", 'Value'],1), "%")
aggregate(ret_bio ~ Yr, FUN = sum, mod1$catch)$ret_bio
Tot.catch.df = cbind((Dat_start_mod1-1):Dat_end_mod1, Tot.catch)
temp = sort(Tot.catch.df[,2], index.return = TRUE)$ix
max.catch.5 = Tot.catch.df[(temp[length(temp)]-5):temp[length(temp)],]
Tot.catch.df = as.data.frame(Tot.catch.df)
colnames(Tot.catch.df)<-c("Year", "Catch"
Tot.catch = aggregate(ret_bio ~ Yr, FUN = sum, mod1$catch)$ret_bio
Tot.catch.df = cbind((Dat_start_mod1-1):Dat_end_mod1, Tot.catch)
temp = sort(Tot.catch.df[,2], index.return = TRUE)$ix
max.catch.5 = Tot.catch.df[(temp[length(temp)]-5):temp[length(temp)],]
Tot.catch.df = as.data.frame(Tot.catch.df)
colnames(Tot.catch.df)<-c("Year", "Catch")
Tot.catch = aggregate(ret_bio ~ Yr, FUN = sum, mod1$catch)$ret_bio
Tot.catch.df = cbind((Dat_start_mod1-1):Dat_end_mod1, Tot.catch)
temp = sort(Tot.catch.df[,2], index.return = TRUE)$ix
max.catch.5 = Tot.catch.df[(temp[length(temp)]-5):temp[length(temp)],]
Tot.catch.df = as.data.frame(Tot.catch.df)
colnames(Tot.catch.df)<-c("Year", "Catch")
Tot.catch.df
1126.30+1214.49
Tot.catch.df[Tot.catch.df[,1]==1950,2]
Tot.catch.df[Tot.catch.df[,1]==1931,2]
Tot.catch.df[Tot.catch.df[,1]==1968,2]
Tot.catch.df[Tot.catch.df[,1]%in%1931:1968,2]
mean(Tot.catch.df[Tot.catch.df[,1]%in%1931:1968,2])
258+292+78+121
335.69+413.29
