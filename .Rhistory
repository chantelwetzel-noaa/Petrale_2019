# Add alignment
align(Ref_pts_mod1.table) = c('l',
'>{\\raggedright}p{4.1in}',
'>{\\centering}p{.65in}',
'>{\\centering}p{.65in}',
'>{\\centering}p{.65in}')
Ref_pts_mod1.table
names = unique(mod1$cpue$Fleet_name)
names
seq_along(survey.list)
mat.names = NULL
for(i in seq_along(survey.list)){
if(i==1) { ind = 1:2  }
if(i!=1) { ind = ind+2}
survey.dig = 0
if(i <= 2) {survey.dig = 2}
Index_Summary[rownames(survey.list[[i]]), ind] = cbind(print(survey.list[[i]]$Obs, digits = survey.dig),
print(survey.list[[i]]$SE,  digits = 2))
mat.names = c(mat.names, "Obs", "SE")
}
Index_Summary = cbind(rownames(Index_Summary), Index_Summary)
# Index of abundance summary, create table
hlines = c(-1, 0, nrow(Index_Summary))
addtorow = list()
addtorow$pos = list(0,0)
addtorow$command = c(" & \\multicolumn{2}{c}{Winter N.} &  \\multicolumn{2}{c}{Winter S.} & \\multicolumn{2}{c}{Triennial Early} & \\multicolumn{2}{c}{Triennial Late} & \\multicolumn{2}{c}{NWFSC Combo} \\\\\n",
"Year & Obs & SE & Obs & SE & Obs & SE & Obs & SE \\\\\n")
Index_summary.table = xtable(Index_Summary,
caption = c('Summary of the fishery-independent biomass/abundance
time-series used in the stock
assessment.  The standard error includes the input annual standard error and model estimated added variance.'),
label = 'tab:Index_Summary',
digits = 2)
# Add alignment
align(Index_summary.table) = c('l',
'>{\\centering}p{.4in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}')
addtorow$command
addtorow$command = c(" & \\multicolumn{2}{c}{Winter N.} &  \\multicolumn{2}{c}{Winter S.} & \\multicolumn{2}{c}{Triennial Early} & \\multicolumn{2}{c}{Triennial Late} & \\multicolumn{2}{c}{NWFSC Combo} \\\\\n",
"Year & Obs & SE & Obs & SE & Obs & SE & Obs & SE & Obs & SE\\\\\n")
Index_summary.table = xtable(Index_Summary,
caption = c('Summary of the fishery-independent biomass/abundance
time-series used in the stock
assessment.  The standard error includes the input annual standard error and model estimated added variance.'),
label = 'tab:Index_Summary',
digits = 2)
# Add alignment
align(Index_summary.table) = c('l',
'>{\\centering}p{.4in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}')
c('l',
'>{\\centering}p{.4in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}')
Index_Summary
names = unique(mod1$cpue$Fleet_name)
survey.list = list()
for(i in 1:length(names)){
grab = mod1$cpue[mod1$cpue$Fleet_name == names[i], c("Obs", "SE") ]
survey.list[[i]] = grab
rownames(survey.list[[i]]) = mod1$cpue[mod1$cpue$Fleet_name == names[i], "Yr" ]
colnames(survey.list[[i]]) = c("Obs", "SE")
}
names(survey.list) = names
Rows = unique(unlist(lapply(survey.list, rownames)))
Rows = sort(as.numeric(Rows))
Index_Summary = matrix("-", nrow = length(Rows), ncol = 2*length(names),
dimnames=list(Rows, sapply(survey.list, colnames)))
mat.names = NULL
for(i in seq_along(survey.list)){
if(i==1) { ind = 1:2  }
if(i!=1) { ind = ind+2}
survey.dig = 0
if(i <= 2) {survey.dig = 2}
Index_Summary[rownames(survey.list[[i]]), ind] = cbind(print(survey.list[[i]]$Obs, digits = survey.dig),
print(survey.list[[i]]$SE,  digits = 2))
mat.names = c(mat.names, "Obs", "SE")
}
Index_Summary = cbind(rownames(Index_Summary), Index_Summary)
Index_Summary
hlines = c(-1, 0, nrow(Index_Summary))
addtorow = list()
addtorow$pos = list(0,0)
addtorow$command = c(" & \\multicolumn{2}{c}{Winter N.} &  \\multicolumn{2}{c}{Winter S.} & \\multicolumn{2}{c}{Triennial Early} & \\multicolumn{2}{c}{Triennial Late} & \\multicolumn{2}{c}{NWFSC Combo} \\\\\n",
"Year & Obs & SE & Obs & SE & Obs & SE & Obs & SE & Obs & SE\\\\\n")
Index_summary.table = xtable(Index_Summary,
caption = c('Summary of the fishery-independent biomass/abundance
time-series used in the stock
assessment.  The standard error includes the input annual standard error and model estimated added variance.'),
label = 'tab:Index_Summary',
digits = 2)
align(Index_summary.table) = c('l',
'>{\\centering}p{.4in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}')
n = unique(mod1$discard$Fleet)
discard = NULL
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
head(discard)
n = unique(mod1$discard$Fleet)
n
n = unique(mod1$discard$Fleet)[1:2]
n
n = unique(mod1$discard$Fleet)[3:4]
n
discard = NULL
for (i in n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
i
discard
n[i]
n = unique(mod1$discard$Fleet)
discard = NULL
for (i in 3:n){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
n
i
3:n
n
discard = NULL
for (i in 3:length(n)){
ind = mod1$discard$Fleet == n[i]
discard = rbind(discard, cbind(mod1$discard$Yr[ind], mod1$discard$Name[ind],
print.numeric(mod1$discard[ind,"Obs"], digits = 3),
print.numeric(mod1$discard$Std_in[ind], digits = 3)))
}
discard
x = 1:18
Age.Error = cbind(mod1$age_error_mean[x,1],
print.numeric(mod1$age_error_mean[x,3], digits = 1), print.numeric(mod1$age_error_sd[x,3], digits = 2),
print.numeric(mod1$age_error_mean[x,4], digits = 1), print.numeric(mod1$age_error_sd[x,4], digits = 2),
print.numeric(mod1$age_error_mean[x,5], digits = 1), print.numeric(mod1$age_error_sd[x,5], digits = 2),
print.numeric(mod1$age_error_mean[x,6], digits = 1), print.numeric(mod1$age_error_sd[x,6], digits = 2),
print.numeric(mod1$age_error_mean[x,8], digits = 1), print.numeric(mod1$age_error_sd[x,8], digits = 2),
print.numeric(mod1$age_error_mean[x,9], digits = 1), print.numeric(mod1$age_error_sd[x,9], digits = 2))
Age.Error
mod1$age_error_mean
mod1$age_error_mean
hlines = c(-1, 0, nrow(Age.Error))
addtorow = list()
addtorow$pos = list(0,0)
addtorow$command = c(" & \\multicolumn{2}{c}{Age Error 1} &  \\multicolumn{2}{c}{Age Error 2} & \\multicolumn{2}{c}{Age Error 3} & \\multicolumn{2}{c}{Age Error 4} & \\multicolumn{2}{c}{Age Error 5} & \\multicolumn{2}{c}{Age Error 6} \\\\\n",
"True Age & Mean & SD & Mean &  SD  & Mean &  SD & Mean & SD & Mean &  SD & Mean &  SD \\\\\n" )
AgeError.table = xtable(Age.Error,
caption = c('Estimated ageing error used in the assessment model'),
label = 'tab:Age_Error')
align(AgeError.table) = c('l',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}')
# Print index summary table
print(AgeError.table,
add.to.row = addtorow,
include.rownames=FALSE,
caption.placement='top',
sanitize.text.function = function(x){x})
x = 1:18
Age.Error = cbind(mod1$age_error_mean[x,1],
print.numeric(mod1$age_error_mean[x,3], digits = 1), print.numeric(mod1$age_error_sd[x,3], digits = 2),
print.numeric(mod1$age_error_mean[x,4], digits = 1), print.numeric(mod1$age_error_sd[x,4], digits = 2),
print.numeric(mod1$age_error_mean[x,5], digits = 1), print.numeric(mod1$age_error_sd[x,5], digits = 2),
print.numeric(mod1$age_error_mean[x,6], digits = 1), print.numeric(mod1$age_error_sd[x,6], digits = 2),
print.numeric(mod1$age_error_mean[x,8], digits = 1), print.numeric(mod1$age_error_sd[x,8], digits = 2),
print.numeric(mod1$age_error_mean[x,9], digits = 1), print.numeric(mod1$age_error_sd[x,9], digits = 2))
Age.Error
x = 1:18
Age.Error = cbind(mod1$age_error_mean[x,1],
print.numeric(mod1$age_error_mean[x,3], digits = 1), print.numeric(mod1$age_error_sd[x,3], digits = 2),
print.numeric(mod1$age_error_mean[x,4], digits = 1), print.numeric(mod1$age_error_sd[x,4], digits = 2),
print.numeric(mod1$age_error_mean[x,5], digits = 1), print.numeric(mod1$age_error_sd[x,5], digits = 2),
print.numeric(mod1$age_error_mean[x,6], digits = 1), print.numeric(mod1$age_error_sd[x,6], digits = 2),
print.numeric(mod1$age_error_mean[x,8], digits = 1), print.numeric(mod1$age_error_sd[x,8], digits = 2),
print.numeric(mod1$age_error_mean[x,9], digits = 1), print.numeric(mod1$age_error_sd[x,9], digits = 2))
colnames(Age.Error) = c("",
"", "",
"", "",
"", "",
"", "",
"", "",
"", "")
hlines = c(-1, 0, nrow(Age.Error))
addtorow = list()
addtorow$pos = list(0,0)
addtorow$command = c(" & \\multicolumn{2}{c}{Age Error 1} &  \\multicolumn{2}{c}{Age Error 2} & \\multicolumn{2}{c}{Age Error 3} & \\multicolumn{2}{c}{Age Error 4} & \\multicolumn{2}{c}{Age Error 5} & \\multicolumn{2}{c}{Age Error 6} \\\\\n",
"True Age & Mean & SD & Mean &  SD  & Mean &  SD & Mean & SD & Mean &  SD & Mean &  SD \\\\\n" )
# Index of abundance summary, create table
AgeError.table = xtable(Age.Error,
caption = c('Estimated ageing error used in the assessment model'),
label = 'tab:Age_Error')
# Add alignment
align(AgeError.table) = c('l',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}')
# Print index summary table
print(AgeError.table,
add.to.row = addtorow,
include.rownames=FALSE,
caption.placement='top',
tabular.environment = 'longtable',
sanitize.text.function = function(x){x})
x = 1:18
Age.Error = cbind(mod1$age_error_mean[x,1],
print.numeric(mod1$age_error_mean[x,3], digits = 1), print.numeric(mod1$age_error_sd[x,3], digits = 2),
print.numeric(mod1$age_error_mean[x,4], digits = 1), print.numeric(mod1$age_error_sd[x,4], digits = 2),
print.numeric(mod1$age_error_mean[x,5], digits = 1), print.numeric(mod1$age_error_sd[x,5], digits = 2),
print.numeric(mod1$age_error_mean[x,6], digits = 1), print.numeric(mod1$age_error_sd[x,6], digits = 2),
print.numeric(mod1$age_error_mean[x,8], digits = 1), print.numeric(mod1$age_error_sd[x,8], digits = 2),
print.numeric(mod1$age_error_mean[x,9], digits = 1), print.numeric(mod1$age_error_sd[x,9], digits = 2))
colnames(Age.Error) = c("",
"", "",
"", "",
"", "",
"", "",
"", "",
"", "")
hlines = c(-1, 0, nrow(Age.Error))
addtorow = list()
addtorow$pos = list(0,0)
addtorow$command = c(" & \\multicolumn{2}{c}{Age Error 1} &  \\multicolumn{2}{c}{Age Error 2} & \\multicolumn{2}{c}{Age Error 3} & \\multicolumn{2}{c}{Age Error 4} & \\multicolumn{2}{c}{Age Error 5} & \\multicolumn{2}{c}{Age Error 6} \\\\\n",
"True Age & Mean & SD & Mean &  SD  & Mean &  SD & Mean & SD & Mean &  SD & Mean &  SD \\\\\n" )
# Index of abundance summary, create table
AgeError.table = xtable(Age.Error,
caption = c('Estimated ageing error used in the assessment model'),
label = 'tab:Age_Error')
# Add alignment
align(AgeError.table) = c('l',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}',
'>{\\centering}p{0.5in}')
# Print index summary table
print(AgeError.table,
add.to.row = addtorow,
include.rownames=FALSE,
caption.placement='top',
tabular.environment = 'longtable',
floating = FALSE,
sanitize.text.function = function(x){x})
names = unique(mod1$cpue$Fleet_name)
survey.list = list()
for(i in 1:length(names)){
grab = mod1$cpue[mod1$cpue$Fleet_name == names[i], c("Obs", "SE") ]
survey.list[[i]] = grab
rownames(survey.list[[i]]) = mod1$cpue[mod1$cpue$Fleet_name == names[i], "Yr" ]
colnames(survey.list[[i]]) = c("Obs", "SE")
}
names(survey.list) = names
Rows = unique(unlist(lapply(survey.list, rownames)))
Rows = sort(as.numeric(Rows))
Index_Summary = matrix("-", nrow = length(Rows), ncol = 2*length(names),
dimnames=list(Rows, sapply(survey.list, colnames)))
mat.names = NULL
for(i in seq_along(survey.list)){
if(i==1) { ind = 1:2  }
if(i!=1) { ind = ind+2}
survey.dig = 0
if(i <= 2) {survey.dig = 2}
Index_Summary[rownames(survey.list[[i]]), ind] = cbind(print(survey.list[[i]]$Obs, digits = survey.dig),
print(survey.list[[i]]$SE,  digits = 2))
mat.names = c(mat.names, "Obs", "SE")
}
Index_Summary = cbind(rownames(Index_Summary), Index_Summary)
Index_Summary
hlines = c(-1, 0, nrow(Index_Summary))
addtorow = list()
addtorow$pos = list(0,0)
addtorow$command = c(" & \\multicolumn{2}{c}{Winter N.} &  \\multicolumn{2}{c}{Winter S.} & \\multicolumn{2}{c}{Triennial Early} & \\multicolumn{2}{c}{Triennial Late} & \\multicolumn{2}{c}{NWFSC Combo} \\\\\n",
"Year & Obs & SE & Obs & SE & Obs & SE & Obs & SE & Obs & SE\\\\\n")
Index_summary.table = xtable(Index_Summary,
caption = c('Summary of the fishery-independent biomass/abundance
time-series used in the stock
assessment.  The standard error includes the input annual standard error and model estimated added variance.'),
label = 'tab:Index_Summary',
digits = 2)
# Add alignment
align(Index_summary.table) = c('l',
'>{\\centering}p{.4in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}',
'>{\\centering}p{.5in}',
'>{\\centering}p{.3in}')
# Print index summary table
print(Index_summary.table,
include.rownames=FALSE,
caption.placement='top',
hline.after = hlines,
add.to.row = addtorow,
include.colnames = FALSE,
sanitize.text.function = function(x){x})
x = 1:18
Age.Error = cbind(mod1$age_error_mean[x,1],
print.numeric(mod1$age_error_mean[x,3], digits = 1), print.numeric(mod1$age_error_sd[x,3], digits = 2),
print.numeric(mod1$age_error_mean[x,4], digits = 1), print.numeric(mod1$age_error_sd[x,4], digits = 2),
print.numeric(mod1$age_error_mean[x,5], digits = 1), print.numeric(mod1$age_error_sd[x,5], digits = 2),
print.numeric(mod1$age_error_mean[x,6], digits = 1), print.numeric(mod1$age_error_sd[x,6], digits = 2),
print.numeric(mod1$age_error_mean[x,8], digits = 1), print.numeric(mod1$age_error_sd[x,8], digits = 2),
print.numeric(mod1$age_error_mean[x,9], digits = 1), print.numeric(mod1$age_error_sd[x,9], digits = 2))
hlines = c(-1, 0, nrow(Age.Error))
addtorow = list()
addtorow$pos = list(0,0)
addtorow$command = c(" & \\multicolumn{2}{c}{Age Error 1} &  \\multicolumn{2}{c}{Age Error 2} & \\multicolumn{2}{c}{Age Error 3} & \\multicolumn{2}{c}{Age Error 4} & \\multicolumn{2}{c}{Age Error 5} & \\multicolumn{2}{c}{Age Error 6} \\\\\n",
"True Age & Mean & SD & Mean &  SD  & Mean &  SD & Mean & SD & Mean &  SD & Mean &  SD \\\\\n" )
# Index of abundance summary, create table
AgeError.table = xtable(Age.Error,
caption = c('Estimated ageing error used in the assessment model'),
label = 'tab:Age_Error')
# Add alignment
align(AgeError.table) = c('lccccccccccccc')#,
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                         '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}',
#                          '>{\\centering}p{0.35in}')
# Print index summary table
print(AgeError.table,
#add.to.row = addtorow,
include.rownames=FALSE,
caption.placement='top',
#size="\\fontsize{11pt}{11pt}\\selectfont",
#sanitize.text.function = function(x){x})
tabular.environment = 'longtable',
floating = FALSE,
add.to.row = addtorow)
Index_Summary
Index_summary.table
hlines = c(-1, 0, nrow(Age.Error))
addtorow = list()
addtorow$pos = list(0)
addtorow$command = c(" & \\multicolumn{2}{c}{Age Error 1} &  \\multicolumn{2}{c}{Age Error 2} & \\multicolumn{2}{c}{Age Error 3} & \\multicolumn{2}{c}{Age Error 4} & \\multicolumn{2}{c}{Age Error 5} & \\multicolumn{2}{c}{Age Error 6} \\\\\n",
"True Age & Mean & SD & Mean &  SD  & Mean &  SD & Mean & SD & Mean &  SD & Mean &  SD \\\\\n" )
# Index of abundance summary, create table
AgeError.table = xtable(Age.Error,
caption = c('Estimated ageing error vectors used in the assessment model'),
label = 'tab:Age_Error')
# Add alignment
align(AgeError.table) = c('lccccccccccccc')
# Print index summary table
print(AgeError.table,
include.rownames=FALSE,
caption.placement='top',
#size="\\fontsize{11pt}{11pt}\\selectfont",
#sanitize.text.function = function(x){x})
tabular.environment = 'longtable',
floating = FALSE,
add.to.row = addtorow)
x = 1:18
Age.Error = cbind(mod1$age_error_mean[x,1],
print.numeric(mod1$age_error_mean[x,3], digits = 1), print.numeric(mod1$age_error_sd[x,3], digits = 2),
print.numeric(mod1$age_error_mean[x,4], digits = 1), print.numeric(mod1$age_error_sd[x,4], digits = 2),
print.numeric(mod1$age_error_mean[x,5], digits = 1), print.numeric(mod1$age_error_sd[x,5], digits = 2),
print.numeric(mod1$age_error_mean[x,6], digits = 1), print.numeric(mod1$age_error_sd[x,6], digits = 2),
print.numeric(mod1$age_error_mean[x,8], digits = 1), print.numeric(mod1$age_error_sd[x,8], digits = 2),
print.numeric(mod1$age_error_mean[x,9], digits = 1), print.numeric(mod1$age_error_sd[x,9], digits = 2))
Age.Error
Age.Error = as.data.frame(Age.Error)
Age.Error
Age.Error
Age.Error = matrix(Age.Error)
Age.Error
Strata = read.csv('./txt_files/nwfsc_strata.csv')
Strata
Strata = read.csv('./txt_files/nwfsc_strata.csv', row.names = FALSE)
Strata = read.csv('./txt_files/nwfsc_strata.csv')
Strata
Strata[,1] = c("Shallow Vancouver", "Shallow Columbia", "Shallow Eureka", "Shallow Monterey", "Shallow Conception",
"Mid Vancouver", "Mid Columbia", "Mid Eureka", "Mid Monterey", "Mid Conception",
"Deep Van/Col/Eur", "Deep Montery", "Deep Conception")
Strata
colnames(Strata) = c('Strata',
'Area',
'Depth Lower Bound',
'Depth Upper Bound',
'Latitude South',
'Latitude North')
Strata = read.csv('./txt_files/nwfsc_strata.csv')
Strata[,1] = c("Shallow Vancouver", "Shallow Columbia", "Shallow Eureka", "Shallow Monterey", "Shallow Conception",
"Mid Vancouver", "Mid Columbia", "Mid Eureka", "Mid Monterey", "Mid Conception",
"Deep Van/Col/Eur", "Deep Montery", "Deep Conception")
colnames(Strata) = c('Strata',
'Area',
'Depth Lower Bound',
'Depth Upper Bound',
'Latitude South',
'Latitude North')
# Index of abundance summary, create table
Strata.table = xtable(Strata,
caption = c('Description of the strata used to create the indices for the NWFSC Shelf-Slope survey.'),
label = 'tab:strata')
# Add alignment
align(Strata.table) = c('l',
'>{\\centering}p{1.5in}',
'>{\\centering}p{0.75in}',
'>{\\centering}p{0.50in}',
'>{\\centering}p{0.50in}',
'>{\\centering}p{0.50in}',
'>{\\centering}p{0.50in}',
'>{\\centering}p{0.50in}')
align(Strata.table) = c('l',
'>{\\centering}p{1.5in}',
'>{\\centering}p{0.75in}',
'>{\\centering}p{0.50in}',
'>{\\centering}p{0.50in}',
'>{\\centering}p{0.50in}',
'>{\\centering}p{0.50in}')#,
#'>{\\centering}p{0.50in}')
Strata = read.csv('./txt_files/nwfsc_strata.csv')
Strata = cbind(Strata[,1], Strata[,3:6])
Strata
Strata = read.csv('./txt_files/tri_late_strata.csv')
Strata
Strata = read.csv('./txt_files/tri_early_strata.csv')
Strata
Strata = read.csv('./txt_files/tri_early_strata.csv')
Strata
Strata
Strata = read.csv('./txt_files/tri_early_strata.csv')
Strata
Strata = cbind(Strata[,1], Strata[,3:6])
Strata[,1] = c("Shallow Van/Col", "Shallow Eureka","Shallow Mon/Con",
"Deep Van/Col/Eur", "Deep Mon/Con")
Strata
